{"ast":null,"code":"var _jsxFileName = \"/home/purvj/Documents/github-repositories/javascript-practice/REACT JS/Visualizing Sorting/src/sortingAlgorithms/SelectionSort.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { useRecoilState } from \"recoil\";\nimport { arrayToSortCommonState, sortingRunningStatus } from \"../common/commonData\";\nimport swap from \"../common/swap\";\nimport { AlgorithmSortingBox } from \"../components/algorithmSortingBox\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SelectionSort() {\n  _s();\n\n  let [array, setArray] = useRecoilState(arrayToSortCommonState);\n  let [comparisonCount, setComparisonCount] = useState(0);\n  let algorithmRunStatus = useRecoilState(sortingRunningStatus);\n  let [swapCount, setSwapCount] = useState(0);\n  let [colorIndexesSettings, setColorIndexesSettings] = useState({\n    compare: [],\n    swap: [],\n    sorted: []\n  });\n\n  if (algorithmRunStatus[0]) {\n    let currentArray = array;\n    let lengthOfArray = array.length;\n    let minimum;\n\n    for (let i = 0; i < lengthOfArray - 1; i++) {\n      minimum = i;\n\n      for (let j = i + 1; j < lengthOfArray; j++) if (currentArray[j] < minimum) minimum = j;\n\n      minimum = currentArray[i + 1];\n      swap(currentArray, i, min);\n      setArray([...currentArray]);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(AlgorithmSortingBox, {\n    array: array,\n    comparisonCount: comparisonCount,\n    swapCount: swapCount,\n    colorIndexesSettings: colorIndexesSettings\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SelectionSort, \"6VvE1hibA0Wqf2d+FxQL+iPX47I=\", false, function () {\n  return [useRecoilState, useRecoilState];\n});\n\n_c = SelectionSort;\n\nvar _c;\n\n$RefreshReg$(_c, \"SelectionSort\");","map":{"version":3,"sources":["/home/purvj/Documents/github-repositories/javascript-practice/REACT JS/Visualizing Sorting/src/sortingAlgorithms/SelectionSort.js"],"names":["useState","useRecoilState","arrayToSortCommonState","sortingRunningStatus","swap","AlgorithmSortingBox","SelectionSort","array","setArray","comparisonCount","setComparisonCount","algorithmRunStatus","swapCount","setSwapCount","colorIndexesSettings","setColorIndexesSettings","compare","sorted","currentArray","lengthOfArray","length","minimum","i","j","min"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,cAAT,QAA+B,QAA/B;AACA,SAASC,sBAAT,EAAgCC,oBAAhC,QAA4D,sBAA5D;AACA,OAAOC,IAAP,MAAiB,gBAAjB;AACA,SAASC,mBAAT,QAAoC,mCAApC;;AAGA,eAAe,SAASC,aAAT,GAAyB;AAAA;;AACpC,MAAI,CAACC,KAAD,EAAOC,QAAP,IAAmBP,cAAc,CAACC,sBAAD,CAArC;AACA,MAAI,CAACO,eAAD,EAAiBC,kBAAjB,IAAuCV,QAAQ,CAAC,CAAD,CAAnD;AACA,MAAIW,kBAAkB,GAAGV,cAAc,CAACE,oBAAD,CAAvC;AACA,MAAI,CAACS,SAAD,EAAWC,YAAX,IAA2Bb,QAAQ,CAAC,CAAD,CAAvC;AACA,MAAI,CAACc,oBAAD,EAAsBC,uBAAtB,IAAiDf,QAAQ,CAAC;AAC1DgB,IAAAA,OAAO,EAAE,EADiD;AAE1DZ,IAAAA,IAAI,EAAG,EAFmD;AAG1Da,IAAAA,MAAM,EAAG;AAHiD,GAAD,CAA7D;;AAMA,MAAGN,kBAAkB,CAAC,CAAD,CAArB,EAA0B;AACtB,QAAIO,YAAY,GAAGX,KAAnB;AACA,QAAIY,aAAa,GAAGZ,KAAK,CAACa,MAA1B;AACA,QAAIC,OAAJ;;AAEA,SAAI,IAAIC,CAAC,GAAI,CAAb,EAAiBA,CAAC,GAAGH,aAAa,GAAG,CAArC,EAAyCG,CAAC,EAA1C,EAA8C;AAC1CD,MAAAA,OAAO,GAAGC,CAAV;;AACA,WAAI,IAAIC,CAAC,GAAID,CAAC,GAAC,CAAf,EAAmBC,CAAC,GAAGJ,aAAvB,EAAuCI,CAAC,EAAxC,EAA8C,IAAGL,YAAY,CAACK,CAAD,CAAZ,GAAkBF,OAArB,EAA8BA,OAAO,GAAGE,CAAV;;AAC5EF,MAAAA,OAAO,GAAGH,YAAY,CAACI,CAAC,GAAC,CAAH,CAAtB;AACAlB,MAAAA,IAAI,CAACc,YAAD,EAAcI,CAAd,EAAgBE,GAAhB,CAAJ;AACAhB,MAAAA,QAAQ,CAAC,CAAC,GAAGU,YAAJ,CAAD,CAAR;AACH;AACJ;;AACD,sBACI,QAAC,mBAAD;AAAqB,IAAA,KAAK,EAAEX,KAA5B;AAAmC,IAAA,eAAe,EAAEE,eAApD;AAAqE,IAAA,SAAS,EAAEG,SAAhF;AAA2F,IAAA,oBAAoB,EAAEE;AAAjH;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH;;GA3BuBR,a;UACGL,c,EAEEA,c;;;KAHLK,a","sourcesContent":["import { useState } from \"react\";\nimport { useRecoilState } from \"recoil\";\nimport { arrayToSortCommonState,sortingRunningStatus } from \"../common/commonData\";\nimport swap from \"../common/swap\";\nimport { AlgorithmSortingBox } from \"../components/algorithmSortingBox\";\n\n\nexport default function SelectionSort() {\n    let [array,setArray] = useRecoilState(arrayToSortCommonState);\n    let [comparisonCount,setComparisonCount] = useState(0);\n    let algorithmRunStatus = useRecoilState(sortingRunningStatus);\n    let [swapCount,setSwapCount] = useState(0);\n    let [colorIndexesSettings,setColorIndexesSettings] = useState({\n        compare: [],\n        swap : [],\n        sorted : []\n    });\n\n    if(algorithmRunStatus[0]) {    \n        let currentArray = array;\n        let lengthOfArray = array.length;\n        let minimum;\n\n        for(let i  = 0 ; i < lengthOfArray - 1 ; i++) {\n            minimum = i\n            for(let j  = i+1 ; j < lengthOfArray ; j++)   if(currentArray[j] < minimum) minimum = j;\n            minimum = currentArray[i+1];    \n            swap(currentArray,i,min);\n            setArray([...currentArray]);\n        }\n    }\n    return ( \n        <AlgorithmSortingBox array={array} comparisonCount={comparisonCount} swapCount={swapCount} colorIndexesSettings={colorIndexesSettings} />\n        )    \n} "]},"metadata":{},"sourceType":"module"}