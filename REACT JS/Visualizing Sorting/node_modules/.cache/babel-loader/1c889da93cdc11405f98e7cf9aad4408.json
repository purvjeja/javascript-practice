{"ast":null,"code":"var _jsxFileName = \"/home/purvj/Documents/github-repositories/javascript-practice/REACT JS/Visualizing Sorting/src/sortingAlgorithms/BubbleSort.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { useRecoilState } from \"recoil\";\nimport { arrayToSortCommonState, sortedStatus, sortingTimeSpeed, sortingRunningStatus } from \"../common/commonData\";\nimport { AlgorithmSortingBox } from \"../components/algorithmSortingBox\";\nimport swap from \"../common/swap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function BubbleSort() {\n  _s();\n\n  let [mainArray, setMainArray] = useRecoilState(arrayToSortCommonState);\n  let [statusOfSorting, setStatusOfSorting] = useRecoilState(sortedStatus);\n  let timeSpeed = useRecoilState(sortingTimeSpeed);\n  let [array, setArray] = useState(mainArray);\n  let algorithmRunStatus = useRecoilState(sortingRunningStatus);\n  let [ithIndex, setIthIndex] = useState(0);\n  let [jthIndex, setJthIndex] = useState(0);\n  let [loopInvokeStatus, setLoopInvokeStatus] = useState(true); // let [comparisonCount,setComparisonCount] = useState(0);\n\n  let comparisonCount = 0;\n  useEffect(() => {\n    comparisonCount += 1;\n  }, []);\n\n  if (algorithmRunStatus[0] && loopInvokeStatus) {\n    let timeOut = 1000;\n    const lengthOfArray = array.length;\n    const currentArray = array;\n\n    for (let i = 0; i < lengthOfArray; i++) {\n      for (let j = 0; j < lengthOfArray - i - 1; j++) {\n        // eslint-disable-next-line no-loop-func\n        setTimeout(() => {\n          console.log(array);\n          setLoopInvokeStatus(false);\n          setIthIndex(i);\n          setJthIndex(j);\n          if (currentArray[j] > currentArray[j + 1]) swap(currentArray, j, j + 1);\n          setArray([...currentArray]);\n\n          if (i === lengthOfArray - 2 && j === lengthOfArray - i - 2) {\n            setStatusOfSorting(true);\n          }\n        }, timeOut += timeSpeed[0]);\n      }\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(AlgorithmSortingBox, {\n    array: array,\n    comparisonCount: comparisonCount\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n}\n\n_s(BubbleSort, \"eETlHNOrgVHOV6+qKqwuBHHQ/QM=\", false, function () {\n  return [useRecoilState, useRecoilState, useRecoilState, useRecoilState];\n});\n\n_c = BubbleSort;\n\nvar _c;\n\n$RefreshReg$(_c, \"BubbleSort\");","map":{"version":3,"sources":["/home/purvj/Documents/github-repositories/javascript-practice/REACT JS/Visualizing Sorting/src/sortingAlgorithms/BubbleSort.js"],"names":["useEffect","useState","useRecoilState","arrayToSortCommonState","sortedStatus","sortingTimeSpeed","sortingRunningStatus","AlgorithmSortingBox","swap","BubbleSort","mainArray","setMainArray","statusOfSorting","setStatusOfSorting","timeSpeed","array","setArray","algorithmRunStatus","ithIndex","setIthIndex","jthIndex","setJthIndex","loopInvokeStatus","setLoopInvokeStatus","comparisonCount","timeOut","lengthOfArray","length","currentArray","i","j","setTimeout","console","log"],"mappings":";;;AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,cAAT,QAA+B,QAA/B;AACA,SAASC,sBAAT,EAAiCC,YAAjC,EAA+CC,gBAA/C,EAAgEC,oBAAhE,QAA4F,sBAA5F;AACA,SAASC,mBAAT,QAAoC,mCAApC;AACA,OAAOC,IAAP,MAAiB,gBAAjB;;AAGA,eAAe,SAASC,UAAT,GAAsB;AAAA;;AACjC,MAAI,CAACC,SAAD,EAAWC,YAAX,IAA2BT,cAAc,CAACC,sBAAD,CAA7C;AACA,MAAI,CAACS,eAAD,EAAiBC,kBAAjB,IAAuCX,cAAc,CAACE,YAAD,CAAzD;AACA,MAAIU,SAAS,GAAGZ,cAAc,CAACG,gBAAD,CAA9B;AACA,MAAI,CAACU,KAAD,EAAOC,QAAP,IAAmBf,QAAQ,CAACS,SAAD,CAA/B;AACA,MAAIO,kBAAkB,GAAGf,cAAc,CAACI,oBAAD,CAAvC;AACA,MAAI,CAACY,QAAD,EAAUC,WAAV,IAAyBlB,QAAQ,CAAC,CAAD,CAArC;AACA,MAAI,CAACmB,QAAD,EAAUC,WAAV,IAAyBpB,QAAQ,CAAC,CAAD,CAArC;AACA,MAAI,CAACqB,gBAAD,EAAkBC,mBAAlB,IAAyCtB,QAAQ,CAAC,IAAD,CAArD,CARiC,CASjC;;AACA,MAAIuB,eAAe,GAAG,CAAtB;AACAxB,EAAAA,SAAS,CAAC,MAAM;AACZwB,IAAAA,eAAe,IAAE,CAAjB;AACH,GAFQ,EAEP,EAFO,CAAT;;AAIA,MAAGP,kBAAkB,CAAC,CAAD,CAAlB,IAAyBK,gBAA5B,EAA8C;AAC1C,QAAIG,OAAO,GAAG,IAAd;AACA,UAAMC,aAAa,GAAGX,KAAK,CAACY,MAA5B;AACA,UAAMC,YAAY,GAAGb,KAArB;;AACA,SAAI,IAAIc,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGH,aAAnB,EAAmCG,CAAC,EAApC,EAAwC;AACpC,WAAI,IAAIC,CAAC,GAAG,CAAZ,EAAgBA,CAAC,GAAGJ,aAAa,GAACG,CAAd,GAAgB,CAApC,EAAyCC,CAAC,EAA1C,EAA8C;AAC1C;AACAC,QAAAA,UAAU,CAAC,MAAM;AACbC,UAAAA,OAAO,CAACC,GAAR,CAAYlB,KAAZ;AACAQ,UAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACAJ,UAAAA,WAAW,CAACU,CAAD,CAAX;AACAR,UAAAA,WAAW,CAACS,CAAD,CAAX;AACA,cAAGF,YAAY,CAACE,CAAD,CAAZ,GAAkBF,YAAY,CAACE,CAAC,GAAC,CAAH,CAAjC,EAAwCtB,IAAI,CAACoB,YAAD,EAAcE,CAAd,EAAgBA,CAAC,GAAC,CAAlB,CAAJ;AACxCd,UAAAA,QAAQ,CAAC,CAAC,GAAGY,YAAJ,CAAD,CAAR;;AACA,cAAGC,CAAC,KAAKH,aAAa,GAAG,CAAtB,IAA2BI,CAAC,KAAKJ,aAAa,GAAGG,CAAhB,GAAoB,CAAxD,EACC;AACGhB,YAAAA,kBAAkB,CAAC,IAAD,CAAlB;AAEF;AACL,SAZS,EAYNY,OAAO,IAAIX,SAAS,CAAC,CAAD,CAZd,CAAV;AAaH;AACJ;AACJ;;AACD,sBACI,QAAC,mBAAD;AAAqB,IAAA,KAAK,EAAEC,KAA5B;AAAmC,IAAA,eAAe,EAAES;AAApD;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH;;GAzCuBf,U;UACWP,c,EACYA,c,EAC3BA,c,EAESA,c;;;KALLO,U","sourcesContent":["\nimport { useEffect, useState } from \"react\";\nimport { useRecoilState } from \"recoil\";\nimport { arrayToSortCommonState ,sortedStatus ,sortingTimeSpeed,sortingRunningStatus } from \"../common/commonData\";\nimport { AlgorithmSortingBox } from \"../components/algorithmSortingBox\";\nimport swap from \"../common/swap\";\n\n\nexport default function BubbleSort() {\n    let [mainArray,setMainArray] = useRecoilState(arrayToSortCommonState);\n    let [statusOfSorting,setStatusOfSorting] = useRecoilState(sortedStatus);\n    let timeSpeed = useRecoilState(sortingTimeSpeed);\n    let [array,setArray] = useState(mainArray);\n    let algorithmRunStatus = useRecoilState(sortingRunningStatus);\n    let [ithIndex,setIthIndex] = useState(0);\n    let [jthIndex,setJthIndex] = useState(0);\n    let [loopInvokeStatus,setLoopInvokeStatus] = useState(true);\n    // let [comparisonCount,setComparisonCount] = useState(0);\n    let comparisonCount = 0;\n    useEffect(() => {\n        comparisonCount+=1;\n    },[]);\n    \n    if(algorithmRunStatus[0] && loopInvokeStatus) {\n        let timeOut = 1000;\n        const lengthOfArray = array.length;\n        const currentArray = array;\n        for(let i = 0; i < lengthOfArray ; i++) {\n            for(let j = 0 ; j < lengthOfArray-i-1  ; j++) {\n                // eslint-disable-next-line no-loop-func\n                setTimeout(() => {\n                    console.log(array);\n                    setLoopInvokeStatus(false);\n                    setIthIndex(i);\n                    setJthIndex(j);\n                    if(currentArray[j] > currentArray[j+1]) swap(currentArray,j,j+1);\n                    setArray([...currentArray]);\n                    if(i === lengthOfArray - 2 && j === lengthOfArray - i - 2)\n                     { \n                        setStatusOfSorting(true);\n                        \n                     }\n                },  timeOut += timeSpeed[0]);\n            }    \n        }\n    }\n    return ( \n        <AlgorithmSortingBox array={array} comparisonCount={comparisonCount} />\n        )    \n}"]},"metadata":{},"sourceType":"module"}