{"ast":null,"code":"var _jsxFileName = \"/home/purvj/Documents/github-repositories/javascript-practice/REACT JS/Visualizing Sorting/src/sortingAlgorithms/BubbleSort.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { useRecoilState } from \"recoil\";\nimport { arrayToSortCommonState, sortedStatus, sortingTimeSpeed, sortingRunningStatus } from \"../common/commonData\";\nimport { AlgorithmSortingBox } from \"../components/algorithmSortingBox\";\nimport swap from \"../common/swap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function BubbleSort() {\n  _s();\n\n  let [mainArray, setMainArray] = useRecoilState(arrayToSortCommonState);\n  let [statusOfSorting, setStatusOfSorting] = useRecoilState(sortedStatus);\n  let timeSpeed = useRecoilState(sortingTimeSpeed);\n  let [array, setArray] = useState(mainArray);\n  let algorithmRunStatus = useRecoilState(sortingRunningStatus);\n  let [globlaI, setgloblaI] = useState(0);\n  let [globalJ, setglobalJ] = useState(0);\n  let [globalIndex, setGloblaIndexes] = useState({\n    valueOfI: 0,\n    valueOfJ: 0\n  });\n  let [loopInvokeStatus, setLoopInvokeStatus] = useState(true);\n  let [comparisonCount, setComparisonCount] = useState(0);\n  let [swapCount, setSwapCount] = useState(0);\n  let [colorIndexesSettings, setColorIndexesSettings] = useState({\n    compare: [],\n    swap: [],\n    sorted: []\n  });\n  let finalIndexes = [];\n\n  if (algorithmRunStatus[0] && loopInvokeStatus) {\n    let timeOut = 1000;\n    const lengthOfArray = array.length;\n    const currentArray = array;\n\n    for (let i = 0; i < lengthOfArray; i++) {\n      for (let j = 0; j < lengthOfArray - i - 1; j++) {\n        // eslint-disable-next-line \n        setTimeout(() => {\n          setLoopInvokeStatus(false);\n\n          for (let i = array.length - 1; i > array.length - globlaI - 1; i--) finalIndexes.push(i);\n\n          let comparedBoxesPosition = globlaI === array.length - 2 ? [] : [globalJ, globalJ + 1];\n          setComparisonCount(comparisonCount++); // const setI = i , setJ = j;\n          // setgloblaI(setI);\n          // setglobalJ(setJ);\n\n          setGloblaIndexes({\n            valueOfI: i,\n            valueOfJ: j\n          });\n          setColorIndexesSettings({\n            compare: [],\n            swap: [globlaI, globalJ],\n            sorted: finalIndexes\n          });\n\n          if (currentArray[j] > currentArray[j + 1]) {\n            swap(currentArray, j, j + 1);\n            setSwapCount(swapCount++);\n            setArray([...currentArray]);\n          }\n\n          console.log(globlaI);\n\n          if (i === lengthOfArray - 2 && j === lengthOfArray - i - 2) {\n            setStatusOfSorting(true);\n          }\n        }, timeOut += timeSpeed[0]);\n      }\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(AlgorithmSortingBox, {\n    array: array,\n    comparisonCount: comparisonCount,\n    swapCount: swapCount,\n    colorIndexesSettings: colorIndexesSettings\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n}\n\n_s(BubbleSort, \"jmOjqQcbXjOoP+ajmFf55P9yOvQ=\", false, function () {\n  return [useRecoilState, useRecoilState, useRecoilState, useRecoilState];\n});\n\n_c = BubbleSort;\n\nvar _c;\n\n$RefreshReg$(_c, \"BubbleSort\");","map":{"version":3,"sources":["/home/purvj/Documents/github-repositories/javascript-practice/REACT JS/Visualizing Sorting/src/sortingAlgorithms/BubbleSort.js"],"names":["useEffect","useState","useRecoilState","arrayToSortCommonState","sortedStatus","sortingTimeSpeed","sortingRunningStatus","AlgorithmSortingBox","swap","BubbleSort","mainArray","setMainArray","statusOfSorting","setStatusOfSorting","timeSpeed","array","setArray","algorithmRunStatus","globlaI","setgloblaI","globalJ","setglobalJ","globalIndex","setGloblaIndexes","valueOfI","valueOfJ","loopInvokeStatus","setLoopInvokeStatus","comparisonCount","setComparisonCount","swapCount","setSwapCount","colorIndexesSettings","setColorIndexesSettings","compare","sorted","finalIndexes","timeOut","lengthOfArray","length","currentArray","i","j","setTimeout","push","comparedBoxesPosition","console","log"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useRecoilState } from \"recoil\";\nimport { arrayToSortCommonState ,sortedStatus ,sortingTimeSpeed,sortingRunningStatus } from \"../common/commonData\";\nimport { AlgorithmSortingBox } from \"../components/algorithmSortingBox\";\nimport swap from \"../common/swap\";\n\n\nexport default function BubbleSort() {\n    let [mainArray,setMainArray] = useRecoilState(arrayToSortCommonState);\n    let [statusOfSorting,setStatusOfSorting] = useRecoilState(sortedStatus);\n    let timeSpeed = useRecoilState(sortingTimeSpeed);\n    let [array,setArray] = useState(mainArray);\n    let algorithmRunStatus = useRecoilState(sortingRunningStatus);\n    let [globlaI,setgloblaI] = useState(0);\n    let [globalJ,setglobalJ] = useState(0);\n    let [globalIndex,setGloblaIndexes] = useState({\n        valueOfI : 0,\n        valueOfJ : 0\n    });\n    let [loopInvokeStatus,setLoopInvokeStatus] = useState(true);\n    let [comparisonCount,setComparisonCount] = useState(0);\n    let [swapCount,setSwapCount] = useState(0);\n    let [colorIndexesSettings,setColorIndexesSettings] = useState({\n        compare: [],\n        swap : [],\n        sorted : []\n    });\n    let finalIndexes = [];\n    if(algorithmRunStatus[0] && loopInvokeStatus) {\n        let timeOut = 1000;\n        const lengthOfArray = array.length;\n        const currentArray = array;\n\n            for(let i = 0; i < lengthOfArray ; i++) {\n                for(let j = 0 ; j < lengthOfArray-i-1  ; j++) {\n                    // eslint-disable-next-line \n                    setTimeout(() => {\n                        setLoopInvokeStatus(false);\n                        for(let i = array.length - 1 ; i > array.length - globlaI - 1 ; i-- ) finalIndexes.push(i);\n                        let comparedBoxesPosition = (globlaI === array.length - 2) ? [] : [globalJ,globalJ+1];\n                        setComparisonCount(comparisonCount++);\n                        // const setI = i , setJ = j;\n                        // setgloblaI(setI);\n                        // setglobalJ(setJ);\n\n                        setGloblaIndexes({\n                            valueOfI : i,\n                            valueOfJ : j\n                        });\n\n                        setColorIndexesSettings({\n                            compare: [],\n                            swap : [globlaI,globalJ],\n                            sorted : finalIndexes \n                        });\n\n                        if(currentArray[j] > currentArray[j+1]) { \n                            swap(currentArray,j,j+1);\n                            setSwapCount(swapCount++);\n                            setArray([...currentArray]);\n                        }\n                        console.log(globlaI);\n                        \n                        if(i === lengthOfArray - 2 && j === lengthOfArray - i - 2)\n                        { \n                            setStatusOfSorting(true);\n                            \n                        }\n                        \n                    },  timeOut += timeSpeed[0]);\n                }    \n            }\n    }\n    return ( \n        <AlgorithmSortingBox array={array} comparisonCount={comparisonCount} swapCount={swapCount} colorIndexesSettings={colorIndexesSettings} />\n        )    \n}"]},"metadata":{},"sourceType":"module"}