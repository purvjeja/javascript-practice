{"ast":null,"code":"var _jsxFileName = \"/home/purvj/Documents/github-repositories/javascript-practice/REACT JS/Visualizing Sorting/src/main.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport \"./commonStyle.css\";\nimport swap from \"./swap\";\nimport TimeSpeed from \"./timeSpeed\";\nimport { data, sortedStatus } from \"./common/commonData\";\nimport { colorIndexesSettings } from \"./common/commonData\";\nimport NavigationComponent from \"./navigationComponent\";\nimport AlgorithmBox from \"./common/algorithmSortingBox\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SortingComponent() {\n  _s();\n\n  let [arrayToSort, setArrayToSort] = useState([4, 3, 2, 1, 0, -1, -2, -3, -4]);\n  let [operationIndex, setOperationIndex] = useState({\n    compareColorIndex: [],\n    swapColorIndex: [],\n    sortedColorIndex: []\n  });\n  let [ithIndex, setIthIndex] = useState(0);\n  let [jthIndex, setJthIndex] = useState(0);\n  let [timeCounter, setTimeCounter] = useState(data.speedTimeCount);\n\n  const updateSortingArea = () => {\n    let array = document.getElementById(\"arrayInput\").value.split(\",\");\n    array = array.map(arrayElement => parseInt(arrayElement));\n    setArrayToSort(array);\n  };\n\n  useEffect(() => {\n    const finalIndexes = [];\n\n    for (let i = arrayToSort.length - 1; i > arrayToSort.length - ithIndex - 1; i--) finalIndexes.push(i);\n\n    const comparedBoxesPosition = ithIndex === arrayToSort.length - 2 ? [] : [jthIndex, jthIndex + 1];\n    colorIndexesSettings.compareColorIndex = comparedBoxesPosition;\n    colorIndexesSettings.swapColorIndex = comparedBoxesPosition;\n    colorIndexesSettings.sortedColorIndex = finalIndexes;\n  }, [ithIndex, jthIndex, arrayToSort]);\n\n  const generateRandomNumber = () => {\n    sortedStatus.value = false;\n    let randomNumberArray = [];\n\n    for (let i = 0; i < 10; i++) {\n      randomNumberArray.push(parseInt(Math.random() * 100));\n    }\n\n    document.getElementById(\"arrayInput\").value = randomNumberArray.toString();\n    setOperationIndex({\n      compareColorIndex: [],\n      swapColorIndex: [],\n      sortedColorIndex: []\n    });\n    setArrayToSort(randomNumberArray);\n  };\n\n  const bubbleSort = () => {\n    let timeOut = 500;\n    const n = arrayToSort.length;\n    const array = arrayToSort;\n\n    for (let i = 0; i < n; i++) {\n      for (let j = 0; j < n - i - 1; j++) {\n        setTimeout(() => {\n          setIthIndex(i);\n          setJthIndex(j);\n          setTimeCounter(data.speedTimeCount);\n          console.log(data.speedTimeCount);\n          if (array[j] > array[j + 1]) swap(array, j, j + 1);\n          setArrayToSort([...array]);\n          if (i === n - 2 && j === n - i - 2) sortedStatus.value = true;\n        }, timeOut += parseInt(data.speedTimeCount));\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(NavigationComponent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"inputControllerComponent\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: generateRandomNumber,\n        children: \"Random Numbers\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"arrayInput\",\n        type: \"text\",\n        onChange: updateSortingArea\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: bubbleSort,\n        children: \"Start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(TimeSpeed, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"areaOfAlgorithmsVisualization\",\n      children: /*#__PURE__*/_jsxDEV(AlgorithmBox, {\n        array: arrayToSort\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SortingComponent, \"7iO80qvYSgUa3hCvYRp7QuiyrPc=\");\n\n_c = SortingComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"SortingComponent\");","map":{"version":3,"sources":["/home/purvj/Documents/github-repositories/javascript-practice/REACT JS/Visualizing Sorting/src/main.js"],"names":["useEffect","useState","swap","TimeSpeed","data","sortedStatus","colorIndexesSettings","NavigationComponent","AlgorithmBox","SortingComponent","arrayToSort","setArrayToSort","operationIndex","setOperationIndex","compareColorIndex","swapColorIndex","sortedColorIndex","ithIndex","setIthIndex","jthIndex","setJthIndex","timeCounter","setTimeCounter","speedTimeCount","updateSortingArea","array","document","getElementById","value","split","map","arrayElement","parseInt","finalIndexes","i","length","push","comparedBoxesPosition","generateRandomNumber","randomNumberArray","Math","random","toString","bubbleSort","timeOut","n","j","setTimeout","console","log"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\"\nimport \"./commonStyle.css\";\nimport swap from \"./swap\";\nimport TimeSpeed from \"./timeSpeed\";\nimport { data, sortedStatus } from \"./common/commonData\";\nimport { colorIndexesSettings } from \"./common/commonData\";\nimport NavigationComponent from \"./navigationComponent\";\nimport AlgorithmBox from \"./common/algorithmSortingBox\";\n\nexport default function SortingComponent() {\n    let [arrayToSort,setArrayToSort] = useState([4,3,2,1,0,-1,-2,-3,-4]);\n    let [operationIndex,setOperationIndex] = useState({\n        compareColorIndex : [],\n        swapColorIndex : [],\n        sortedColorIndex : []\n    });\n    let [ithIndex,setIthIndex] = useState(0);\n    let [jthIndex,setJthIndex] = useState(0);\n    let [timeCounter,setTimeCounter] = useState(data.speedTimeCount);\n\n\n\n    const updateSortingArea = () => {\n        let array = document.getElementById(\"arrayInput\").value.split(\",\");\n        array = array.map(arrayElement => parseInt(arrayElement));\n        setArrayToSort(array);\n    }   \n\n    useEffect(() => {\n        const finalIndexes = [];\n        for(let i = arrayToSort.length - 1 ; i > arrayToSort.length - ithIndex - 1 ; i-- ) finalIndexes.push(i);\n        const comparedBoxesPosition = (ithIndex === arrayToSort.length-2) ? [] : [jthIndex,jthIndex+1];\n\n        colorIndexesSettings.compareColorIndex = comparedBoxesPosition;\n        colorIndexesSettings.swapColorIndex = comparedBoxesPosition;\n        colorIndexesSettings.sortedColorIndex = finalIndexes;\n        \n    },[ithIndex,jthIndex,arrayToSort]);\n\n\n    const generateRandomNumber = () => {\n        sortedStatus.value = false;\n        let randomNumberArray = [];\n        for(let i = 0 ; i < 10 ; i++) {\n            randomNumberArray.push(parseInt(Math.random() * 100));\n        }\n        document.getElementById(\"arrayInput\").value = randomNumberArray.toString(); \n        setOperationIndex({\n            compareColorIndex : [],\n            swapColorIndex : [],\n            sortedColorIndex : [], \n        });\n        setArrayToSort(randomNumberArray);\n    }\n\n    const bubbleSort = () => {\n        let timeOut = 500;\n        const n = arrayToSort.length;\n        const array = arrayToSort;\n        for(let i = 0; i < n ; i++) {\n            for(let j = 0 ; j < n-i-1  ; j++) {\n                setTimeout(() => {\n                    setIthIndex(i);\n                    setJthIndex(j);\n                    setTimeCounter(data.speedTimeCount);\n                    console.log( data.speedTimeCount);\n                    if(array[j] > array[j+1]) swap(array,j,j+1);          \n                    setArrayToSort([...array]);\n                    if(i === n - 2 && j === n - i - 2) sortedStatus.value = true;\n                },  timeOut += parseInt(data.speedTimeCount));\n            }    \n        }\n    }   \n\n    return (\n        <div>\n            \n            <NavigationComponent />\n            <div className=\"inputControllerComponent\" >\n            <button onClick={generateRandomNumber}>Random Numbers</button>    \n            <input id=\"arrayInput\" type=\"text\" onChange={updateSortingArea}/>\n            <button onClick={bubbleSort}>Start</button>\n            <TimeSpeed />\n             </div>\n            \n            <div className=\"areaOfAlgorithmsVisualization\">\n                <AlgorithmBox array={arrayToSort} />\n            </div>\n       </div>\n    )       \n}"]},"metadata":{},"sourceType":"module"}