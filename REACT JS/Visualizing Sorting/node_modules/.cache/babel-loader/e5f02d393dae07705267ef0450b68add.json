{"ast":null,"code":"var _jsxFileName = \"/home/purvj/Documents/github-repositories/javascript-practice/REACT JS/Visualizing Sorting/src/sortingAlgorithms/BubbleSort.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { useRecoilState } from \"recoil\";\nimport { liveAlgorithmData, arrayToSortCommonState } from \"../common/commonData\";\nimport { AlgorithmSortingBox } from \"../components/algorithmSortingBox\";\nimport swap from \"../common/swap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function BubbleSort() {\n  _s();\n\n  let mainArray = useRecoilState(arrayToSortCommonState);\n  let [array, setArray] = useState(mainArray[0]);\n  let [ithIndex, setIthIndex] = useState(0);\n  let [jthIndex, setJthIndex] = useState(0); // let timeOut = 1000;\n  // const n = array.length;\n  // const currentArray = array;\n  // for(let i = 0; i < n ; i++) {\n  //     for(let j = 0 ; j < n-i-1  ; j++) {\n  //         // eslint-disable-next-line no-loop-func\n  //         setTimeout(() => {\n  //             setIthIndex(i);\n  //             setJthIndex(j);\n  //             if(currentArray[j] > currentArray[j+1]) swap(currentArray,j,j+1);\n  //             setArray([...currentArray]);\n  //             if(i === n - 2 && j === n - i - 2) liveAlgorithmData.sortedStatus = true;\n  //         },  timeOut += parseInt(liveAlgorithmData.speedTimeCount));\n  //     }    \n  // }\n\n  return /*#__PURE__*/_jsxDEV(AlgorithmSortingBox, {\n    array: array\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n}\n\n_s(BubbleSort, \"T34k2mjZnGKMvMu3g7ziQlvNNbI=\", false, function () {\n  return [useRecoilState];\n});\n\n_c = BubbleSort;\n\nvar _c;\n\n$RefreshReg$(_c, \"BubbleSort\");","map":{"version":3,"sources":["/home/purvj/Documents/github-repositories/javascript-practice/REACT JS/Visualizing Sorting/src/sortingAlgorithms/BubbleSort.js"],"names":["useState","useRecoilState","liveAlgorithmData","arrayToSortCommonState","AlgorithmSortingBox","swap","BubbleSort","mainArray","array","setArray","ithIndex","setIthIndex","jthIndex","setJthIndex"],"mappings":";;;AACA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,cAAT,QAA+B,QAA/B;AACA,SAAUC,iBAAV,EAA8BC,sBAA9B,QAA4D,sBAA5D;AACA,SAASC,mBAAT,QAAoC,mCAApC;AACA,OAAOC,IAAP,MAAiB,gBAAjB;;AAGA,eAAe,SAASC,UAAT,GAAsB;AAAA;;AACjC,MAAIC,SAAS,GAAGN,cAAc,CAACE,sBAAD,CAA9B;AACA,MAAI,CAACK,KAAD,EAAOC,QAAP,IAAmBT,QAAQ,CAACO,SAAS,CAAC,CAAD,CAAV,CAA/B;AACA,MAAI,CAACG,QAAD,EAAUC,WAAV,IAAyBX,QAAQ,CAAC,CAAD,CAArC;AACA,MAAI,CAACY,QAAD,EAAUC,WAAV,IAAyBb,QAAQ,CAAC,CAAD,CAArC,CAJiC,CAMjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,sBACI,QAAC,mBAAD;AAAqB,IAAA,KAAK,EAAEQ;AAA5B;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH;;GA1BuBF,U;UACJL,c;;;KADIK,U","sourcesContent":["\nimport { useState } from \"react\";\nimport { useRecoilState } from \"recoil\";\nimport {  liveAlgorithmData , arrayToSortCommonState } from \"../common/commonData\";\nimport { AlgorithmSortingBox } from \"../components/algorithmSortingBox\";\nimport swap from \"../common/swap\";\n\n\nexport default function BubbleSort() {\n    let mainArray = useRecoilState(arrayToSortCommonState);\n    let [array,setArray] = useState(mainArray[0]);\n    let [ithIndex,setIthIndex] = useState(0);\n    let [jthIndex,setJthIndex] = useState(0);\n\n    // let timeOut = 1000;\n    // const n = array.length;\n    // const currentArray = array;\n    // for(let i = 0; i < n ; i++) {\n    //     for(let j = 0 ; j < n-i-1  ; j++) {\n    //         // eslint-disable-next-line no-loop-func\n    //         setTimeout(() => {\n    //             setIthIndex(i);\n    //             setJthIndex(j);\n    //             if(currentArray[j] > currentArray[j+1]) swap(currentArray,j,j+1);\n    //             setArray([...currentArray]);\n    //             if(i === n - 2 && j === n - i - 2) liveAlgorithmData.sortedStatus = true;\n    //         },  timeOut += parseInt(liveAlgorithmData.speedTimeCount));\n    //     }    \n    // }\n    \n\n    return ( \n        <AlgorithmSortingBox array={array}  />\n        )    \n}"]},"metadata":{},"sourceType":"module"}