{"ast":null,"code":"var _jsxFileName = \"/home/purvj/Documents/github-repositories/javascript-practice/REACT JS/Visualizing Sorting/src/sortingComponent.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport \"./sortingComponent.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SortingComponent() {\n  _s();\n\n  let [arrayToSort, setArrayToSort] = useState([4, 3, 2, 1, 0, -1, -2, -3, -4]);\n  let [compareBoxes, setComapareBoxes] = useState([]);\n  let [completedIteration, setcompletedIteration] = useState([0]);\n\n  const updateSortingArea = () => {\n    let array = document.getElementById(\"arrayInput\").value.split(\",\");\n    array = array.map(arrayElement => parseInt(arrayElement));\n    setArrayToSort(array);\n  };\n\n  useEffect(() => {\n    console.log(arrayToSort);\n  });\n\n  const generateRandomNumber = () => {\n    let randomNumberArray = [];\n\n    for (let i = 0; i < 10; i++) {\n      randomNumberArray.push(parseInt(Math.random() * 100));\n    }\n\n    document.getElementById(\"arrayInput\").value = randomNumberArray.toString();\n    setArrayToSort(randomNumberArray);\n  };\n\n  const setColor = index => {\n    if (compareBoxes.includes(index)) return {\n      'background-color': 'yellow'\n    };else if (arrayToSort.length - 1 - completedIteration < index && index <= arrayToSort.length - 1) return {\n      'background-color': 'green'\n    };else return {\n      'background-color': 'grey'\n    };\n  };\n\n  const bubbleSort = () => {\n    let timeOut = 500;\n    const n = arrayToSort.length;\n    const array = arrayToSort;\n\n    for (let i = 0; i < n; i++) {\n      for (let j = 0; j < n - i; j++) {\n        setTimeout(() => {\n          setComapareBoxes([j, j + 1]);\n          setcompletedIteration(i);\n          console.log(i);\n          if (array[j] > array[j + 1]) swap(array, j, j + 1);\n          setArrayToSort([...array]);\n        }, timeOut += 200);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"arrayInput\",\n      type: \"text\",\n      onChange: updateSortingArea\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"numberBoxArea\",\n      children: arrayToSort.map((arrayElement, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"box\",\n        style: setColor(index),\n        id: index,\n        children: [\" \", arrayElement, \" \"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 54\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: bubbleSort,\n      children: \"Start\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: generateRandomNumber,\n      children: \" Random Numbers \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SortingComponent, \"54Vpflj7+J1JZccR6UHvccgrQqA=\");\n\n_c = SortingComponent;\n\nconst swap = (array, swapElementA, swapElementB) => {\n  const temp = array[swapElementA];\n  array[swapElementA] = array[swapElementB];\n  array[swapElementB] = temp;\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"SortingComponent\");","map":{"version":3,"sources":["/home/purvj/Documents/github-repositories/javascript-practice/REACT JS/Visualizing Sorting/src/sortingComponent.js"],"names":["useEffect","useState","SortingComponent","arrayToSort","setArrayToSort","compareBoxes","setComapareBoxes","completedIteration","setcompletedIteration","updateSortingArea","array","document","getElementById","value","split","map","arrayElement","parseInt","console","log","generateRandomNumber","randomNumberArray","i","push","Math","random","toString","setColor","index","includes","length","bubbleSort","timeOut","n","j","setTimeout","swap","swapElementA","swapElementB","temp"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\"\nimport \"./sortingComponent.css\";\n\nexport default function SortingComponent() {\n    let [arrayToSort,setArrayToSort] = useState([4,3,2,1,0,-1,-2,-3,-4]);\n    let [compareBoxes,setComapareBoxes] = useState([]);\n    let [completedIteration,setcompletedIteration] = useState([0]);\n\n\n    const updateSortingArea = () => {\n        let array = document.getElementById(\"arrayInput\").value.split(\",\");\n        array = array.map(arrayElement => parseInt(arrayElement));\n        setArrayToSort(array);\n    }   \n    \n    useEffect(() => {\n        console.log(arrayToSort);\n    });\n\n    const generateRandomNumber = () => {\n        let randomNumberArray = [];\n        for(let i = 0 ; i < 10 ; i++) {\n            randomNumberArray.push(parseInt(Math.random() * 100));\n        }\n        document.getElementById(\"arrayInput\").value = randomNumberArray.toString(); \n        setArrayToSort(randomNumberArray);\n    }\n\n    const setColor = (index) => {\n        if(compareBoxes.includes(index)) return {'background-color' : 'yellow'};\n        else if(((arrayToSort.length - 1) - completedIteration) < index && index <= arrayToSort.length - 1) return {'background-color' : 'green'}; \n        else return {'background-color' : 'grey'};\n    }\n    \n    const bubbleSort = () => {\n        let timeOut = 500;\n        const n = arrayToSort.length;\n        const array = arrayToSort;\n        for(let i = 0; i < n ; i++) {\n            for(let j = 0 ; j < n-i ; j++) {\n                setTimeout(() => {\n                    setComapareBoxes([j,j+1]);\n                    setcompletedIteration(i);\n                    console.log(i);\n                    if(array[j] > array[j+1]) swap(array,j,j+1);          \n                    setArrayToSort([...array]);\n                },  timeOut += 200);\n            } \n        }\n    }   \n\n    return (\n        <div>\n        <input id=\"arrayInput\" type=\"text\" onChange={updateSortingArea} /> \n\n        <div className=\"numberBoxArea\"> \n            {arrayToSort.map((arrayElement,index) => <div className=\"box\" key={index} style={setColor(index)} id={index}> {arrayElement} </div>)}\n        </div>\n        <button onClick={bubbleSort}>Start</button>\n        <button onClick={generateRandomNumber}> Random Numbers </button>\n       </div>\n    )       \n}\n\n\nconst swap = (array,swapElementA,swapElementB) => {\n    const temp = array[swapElementA];\n    array[swapElementA] = array[swapElementB];\n    array[swapElementB] = temp;         \n}"]},"metadata":{},"sourceType":"module"}