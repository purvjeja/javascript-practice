{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport swap from \"../common/swap\";\nimport { liveAlgorithmData, colorIndexesSettings, arrayToSort } from \"../common/commonData\";\nimport { useState } from \"react\";\nexport default function bubbleSort() {\n  _s();\n\n  let [array, setArray] = useState(arrayToSort);\n  let [ithIndex, setIthIndex] = useState(0);\n  let [jthIndex, setJthIndex] = useState(0);\n  const finalIndexes = [];\n\n  for (let i = arrayToSort.length - 1; i > arrayToSort.length - ithIndex - 1; i--) finalIndexes.push(i);\n\n  const comparedBoxesPosition = ithIndex === arrayToSort.length - 2 ? [] : [jthIndex, jthIndex + 1];\n  colorIndexesSettings.compareColorIndex = comparedBoxesPosition;\n  colorIndexesSettings.swapColorIndex = comparedBoxesPosition;\n  colorIndexesSettings.sortedColorIndex = finalIndexes;\n  let timeOut = 1000;\n  const n = array.length;\n  const currentArray = array;\n\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n - i - 1; j++) {\n      // eslint-disable-next-line no-loop-func\n      setTimeout(() => {\n        setIthIndex(i);\n        setJthIndex(j);\n        if (currentArray[j] > currentArray[j + 1]) swap(currentArray, j, j + 1);\n        setArray([...currentArray]);\n        if (i === n - 2 && j === n - i - 2) liveAlgorithmData.sortedStatus = true;\n      }, timeOut += parseInt(liveAlgorithmData.speedTimeCount));\n    }\n  }\n}\n\n_s(bubbleSort, \"kwWs0UDQhs62OIkh3DRzzHsWBWo=\");","map":{"version":3,"sources":["/home/purvj/Documents/github-repositories/javascript-practice/REACT JS/Visualizing Sorting/src/sortingAlgorithms/BubbleSort.js"],"names":["swap","liveAlgorithmData","colorIndexesSettings","arrayToSort","useState","bubbleSort","array","setArray","ithIndex","setIthIndex","jthIndex","setJthIndex","finalIndexes","i","length","push","comparedBoxesPosition","compareColorIndex","swapColorIndex","sortedColorIndex","timeOut","n","currentArray","j","setTimeout","sortedStatus","parseInt","speedTimeCount"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,gBAAjB;AACA,SAASC,iBAAT,EAA2BC,oBAA3B,EAAgDC,WAAhD,QAAmE,sBAAnE;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,eAAe,SAASC,UAAT,GAAsB;AAAA;;AACjC,MAAI,CAACC,KAAD,EAAOC,QAAP,IAAmBH,QAAQ,CAACD,WAAD,CAA/B;AACA,MAAI,CAACK,QAAD,EAAUC,WAAV,IAAyBL,QAAQ,CAAC,CAAD,CAArC;AACA,MAAI,CAACM,QAAD,EAAUC,WAAV,IAAyBP,QAAQ,CAAC,CAAD,CAArC;AAEA,QAAMQ,YAAY,GAAG,EAArB;;AACA,OAAI,IAAIC,CAAC,GAAGV,WAAW,CAACW,MAAZ,GAAqB,CAAjC,EAAqCD,CAAC,GAAGV,WAAW,CAACW,MAAZ,GAAqBN,QAArB,GAAgC,CAAzE,EAA6EK,CAAC,EAA9E,EAAmFD,YAAY,CAACG,IAAb,CAAkBF,CAAlB;;AACnF,QAAMG,qBAAqB,GAAIR,QAAQ,KAAKL,WAAW,CAACW,MAAZ,GAAmB,CAAjC,GAAsC,EAAtC,GAA2C,CAACJ,QAAD,EAAUA,QAAQ,GAAC,CAAnB,CAAzE;AAEAR,EAAAA,oBAAoB,CAACe,iBAArB,GAAyCD,qBAAzC;AACAd,EAAAA,oBAAoB,CAACgB,cAArB,GAAsCF,qBAAtC;AACAd,EAAAA,oBAAoB,CAACiB,gBAArB,GAAwCP,YAAxC;AAEA,MAAIQ,OAAO,GAAG,IAAd;AACI,QAAMC,CAAC,GAAGf,KAAK,CAACQ,MAAhB;AACA,QAAMQ,YAAY,GAAGhB,KAArB;;AACA,OAAI,IAAIO,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGQ,CAAnB,EAAuBR,CAAC,EAAxB,EAA4B;AACxB,SAAI,IAAIU,CAAC,GAAG,CAAZ,EAAgBA,CAAC,GAAGF,CAAC,GAACR,CAAF,GAAI,CAAxB,EAA6BU,CAAC,EAA9B,EAAkC;AAC9B;AACAC,MAAAA,UAAU,CAAC,MAAM;AACbf,QAAAA,WAAW,CAACI,CAAD,CAAX;AACAF,QAAAA,WAAW,CAACY,CAAD,CAAX;AACA,YAAGD,YAAY,CAACC,CAAD,CAAZ,GAAkBD,YAAY,CAACC,CAAC,GAAC,CAAH,CAAjC,EAAwCvB,IAAI,CAACsB,YAAD,EAAcC,CAAd,EAAgBA,CAAC,GAAC,CAAlB,CAAJ;AACxChB,QAAAA,QAAQ,CAAC,CAAC,GAAGe,YAAJ,CAAD,CAAR;AACA,YAAGT,CAAC,KAAKQ,CAAC,GAAG,CAAV,IAAeE,CAAC,KAAKF,CAAC,GAAGR,CAAJ,GAAQ,CAAhC,EAAmCZ,iBAAiB,CAACwB,YAAlB,GAAiC,IAAjC;AACtC,OANS,EAMNL,OAAO,IAAIM,QAAQ,CAACzB,iBAAiB,CAAC0B,cAAnB,CANb,CAAV;AAOH;AACJ;AACR;;GA5BuBtB,U","sourcesContent":["import swap from \"../common/swap\";\nimport { liveAlgorithmData,colorIndexesSettings,arrayToSort } from \"../common/commonData\";\nimport { useState } from \"react\";\nexport default function bubbleSort() {\n    let [array,setArray] = useState(arrayToSort);\n    let [ithIndex,setIthIndex] = useState(0);\n    let [jthIndex,setJthIndex] = useState(0);\n\n    const finalIndexes = [];\n    for(let i = arrayToSort.length - 1 ; i > arrayToSort.length - ithIndex - 1 ; i-- ) finalIndexes.push(i);\n    const comparedBoxesPosition = (ithIndex === arrayToSort.length-2) ? [] : [jthIndex,jthIndex+1];\n\n    colorIndexesSettings.compareColorIndex = comparedBoxesPosition;\n    colorIndexesSettings.swapColorIndex = comparedBoxesPosition;\n    colorIndexesSettings.sortedColorIndex = finalIndexes;\n        \n    let timeOut = 1000;\n        const n = array.length;\n        const currentArray = array;\n        for(let i = 0; i < n ; i++) {\n            for(let j = 0 ; j < n-i-1  ; j++) {\n                // eslint-disable-next-line no-loop-func\n                setTimeout(() => {\n                    setIthIndex(i);\n                    setJthIndex(j);\n                    if(currentArray[j] > currentArray[j+1]) swap(currentArray,j,j+1);\n                    setArray([...currentArray]);\n                    if(i === n - 2 && j === n - i - 2) liveAlgorithmData.sortedStatus = true;\n                },  timeOut += parseInt(liveAlgorithmData.speedTimeCount));\n            }    \n        }\n}"]},"metadata":{},"sourceType":"module"}