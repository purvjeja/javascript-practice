{"ast":null,"code":"var _jsxFileName = \"/home/purvj/Documents/github-repositories/javascript-practice/REACT JS/Visualizing Sorting/src/sortingAlgorithms/BubbleSort.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { useRecoilState } from \"recoil\";\nimport { arrayToSortCommonState } from \"../common/commonData\";\nimport { AlgorithmSortingBox } from \"../components/algorithmSortingBox\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function BubbleSort() {\n  _s();\n\n  let mainArray = useRecoilState(arrayToSortCommonState);\n  let [array, setArray] = useState(mainArray[0]);\n  let [ithIndex, setIthIndex] = useState(0);\n  let [jthIndex, setJthIndex] = useState(0);\n  let timeOut = 1000;\n  const n = array.length;\n  const currentArray = array;\n\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n - i - 1; j++) {\n      // eslint-disable-next-line no-loop-func\n      setTimeout(() => {\n        setIthIndex(i);\n        setJthIndex(j);\n        if (currentArray[j] > currentArray[j + 1]) swap(currentArray, j, j + 1);\n        setArray([...currentArray]);\n        if (i === n - 2 && j === n - i - 2) liveAlgorithmData.sortedStatus = true;\n      }, timeOut += parseInt(liveAlgorithmData.speedTimeCount));\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(AlgorithmSortingBox, {\n    array: array\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n}\n\n_s(BubbleSort, \"T34k2mjZnGKMvMu3g7ziQlvNNbI=\", false, function () {\n  return [useRecoilState];\n});\n\n_c = BubbleSort;\n\nvar _c;\n\n$RefreshReg$(_c, \"BubbleSort\");","map":{"version":3,"sources":["/home/purvj/Documents/github-repositories/javascript-practice/REACT JS/Visualizing Sorting/src/sortingAlgorithms/BubbleSort.js"],"names":["useState","useRecoilState","arrayToSortCommonState","AlgorithmSortingBox","BubbleSort","mainArray","array","setArray","ithIndex","setIthIndex","jthIndex","setJthIndex","timeOut","n","length","currentArray","i","j","setTimeout","swap","liveAlgorithmData","sortedStatus","parseInt","speedTimeCount"],"mappings":";;;AACA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,cAAT,QAA+B,QAA/B;AACA,SAASC,sBAAT,QAAuC,sBAAvC;AACA,SAASC,mBAAT,QAAoC,mCAApC;;AAGA,eAAe,SAASC,UAAT,GAAsB;AAAA;;AACjC,MAAIC,SAAS,GAAGJ,cAAc,CAACC,sBAAD,CAA9B;AACA,MAAI,CAACI,KAAD,EAAOC,QAAP,IAAmBP,QAAQ,CAACK,SAAS,CAAC,CAAD,CAAV,CAA/B;AACA,MAAI,CAACG,QAAD,EAAUC,WAAV,IAAyBT,QAAQ,CAAC,CAAD,CAArC;AACA,MAAI,CAACU,QAAD,EAAUC,WAAV,IAAyBX,QAAQ,CAAC,CAAD,CAArC;AAEA,MAAIY,OAAO,GAAG,IAAd;AACA,QAAMC,CAAC,GAAGP,KAAK,CAACQ,MAAhB;AACA,QAAMC,YAAY,GAAGT,KAArB;;AACA,OAAI,IAAIU,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGH,CAAnB,EAAuBG,CAAC,EAAxB,EAA4B;AACxB,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAgBA,CAAC,GAAGJ,CAAC,GAACG,CAAF,GAAI,CAAxB,EAA6BC,CAAC,EAA9B,EAAkC;AAC9B;AACAC,MAAAA,UAAU,CAAC,MAAM;AACbT,QAAAA,WAAW,CAACO,CAAD,CAAX;AACAL,QAAAA,WAAW,CAACM,CAAD,CAAX;AACA,YAAGF,YAAY,CAACE,CAAD,CAAZ,GAAkBF,YAAY,CAACE,CAAC,GAAC,CAAH,CAAjC,EAAwCE,IAAI,CAACJ,YAAD,EAAcE,CAAd,EAAgBA,CAAC,GAAC,CAAlB,CAAJ;AACxCV,QAAAA,QAAQ,CAAC,CAAC,GAAGQ,YAAJ,CAAD,CAAR;AACA,YAAGC,CAAC,KAAKH,CAAC,GAAG,CAAV,IAAeI,CAAC,KAAKJ,CAAC,GAAGG,CAAJ,GAAQ,CAAhC,EAAmCI,iBAAiB,CAACC,YAAlB,GAAiC,IAAjC;AACtC,OANS,EAMNT,OAAO,IAAIU,QAAQ,CAACF,iBAAiB,CAACG,cAAnB,CANb,CAAV;AAOH;AACJ;;AAGD,sBACI,QAAC,mBAAD;AAAqB,IAAA,KAAK,EAAEjB;AAA5B;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH;;GA1BuBF,U;UACJH,c;;;KADIG,U","sourcesContent":["\nimport { useState } from \"react\";\nimport { useRecoilState } from \"recoil\";\nimport { arrayToSortCommonState } from \"../common/commonData\";\nimport { AlgorithmSortingBox } from \"../components/algorithmSortingBox\";\n\n\nexport default function BubbleSort() {\n    let mainArray = useRecoilState(arrayToSortCommonState);\n    let [array,setArray] = useState(mainArray[0]);\n    let [ithIndex,setIthIndex] = useState(0);\n    let [jthIndex,setJthIndex] = useState(0);\n\n    let timeOut = 1000;\n    const n = array.length;\n    const currentArray = array;\n    for(let i = 0; i < n ; i++) {\n        for(let j = 0 ; j < n-i-1  ; j++) {\n            // eslint-disable-next-line no-loop-func\n            setTimeout(() => {\n                setIthIndex(i);\n                setJthIndex(j);\n                if(currentArray[j] > currentArray[j+1]) swap(currentArray,j,j+1);\n                setArray([...currentArray]);\n                if(i === n - 2 && j === n - i - 2) liveAlgorithmData.sortedStatus = true;\n            },  timeOut += parseInt(liveAlgorithmData.speedTimeCount));\n        }    \n    }\n    \n\n    return ( \n        <AlgorithmSortingBox array={array}  />\n        )    \n}"]},"metadata":{},"sourceType":"module"}