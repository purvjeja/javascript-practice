{"ast":null,"code":"var _jsxFileName = \"/home/purvj/Documents/github-repositories/javascript-practice/REACT JS/Visualizing Sorting/src/sortingAlgorithms/BubbleSort.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { useRecoilState } from \"recoil\";\nimport { arrayToSortCommonState, sortedStatus, sortingTimeSpeed, sortingRunningStatus } from \"../common/commonData\";\nimport { AlgorithmSortingBox } from \"../components/algorithmSortingBox\";\nimport swap from \"../common/swap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function BubbleSort() {\n  _s();\n\n  let [mainArray, setMainArray] = useRecoilState(arrayToSortCommonState);\n  let [statusOfSorting, setStatusOfSorting] = useRecoilState(sortedStatus);\n  let timeSpeed = useRecoilState(sortingTimeSpeed);\n  let [array, setArray] = useState(mainArray);\n  let algorithmRunStatus = useRecoilState(sortingRunningStatus);\n  let [loopInvokeStatus, setLoopInvokeStatus] = useState(true);\n  let [comparisonCount, setComparisonCount] = useState(0);\n  let [swapCount, setSwapCount] = useState(0);\n  let [colorIndexesSettings, setColorIndexesSettings] = useState({\n    compare: [],\n    swap: [],\n    sorted: []\n  });\n  let finalIndexes = [];\n  useEffect(() => {\n    setArray(mainArray);\n  }, [mainArray]); // useEffect(() => {\n  //     setMainArray(array);\n  // },[array, setMainArray]);\n\n  if (algorithmRunStatus[0] && loopInvokeStatus) {\n    let timeOut = 1000;\n    const lengthOfArray = array.length;\n    const currentArray = array;\n\n    for (let i = 0; i < lengthOfArray; i++) {\n      for (let j = 0; j < lengthOfArray - i - 1; j++) {\n        // eslint-disable-next-line \n        setTimeout(() => {\n          if (loopInvokeStatus) setLoopInvokeStatus(false); // console.log(currentArray);\n\n          for (let k = array.length - 1; k > array.length - i - 1; k--) finalIndexes.push(k); // let comparedBoxesPosition = (i === array.length - 2) ? [] : [j,j+1];\n\n\n          setComparisonCount(comparisonCount++);\n          setColorIndexesSettings({\n            compare: [j, j + 1],\n            swap: [],\n            sorted: finalIndexes\n          });\n\n          if (currentArray[j] > currentArray[j + 1]) {\n            setSwapCount(swapCount++);\n            swap(currentArray, j, j + 1);\n            setArray([...currentArray]);\n          }\n\n          if (i === lengthOfArray - 2 && j === lengthOfArray - i - 2) {\n            setStatusOfSorting(true);\n          }\n        }, timeOut += timeSpeed[0]);\n      }\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(AlgorithmSortingBox, {\n    array: array,\n    comparisonCount: comparisonCount,\n    swapCount: swapCount,\n    colorIndexesSettings: colorIndexesSettings\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n}\n\n_s(BubbleSort, \"oPfTIaZA1Rm/YF7O6j/kiYoBJvQ=\", false, function () {\n  return [useRecoilState, useRecoilState, useRecoilState, useRecoilState];\n});\n\n_c = BubbleSort;\n\nvar _c;\n\n$RefreshReg$(_c, \"BubbleSort\");","map":{"version":3,"sources":["/home/purvj/Documents/github-repositories/javascript-practice/REACT JS/Visualizing Sorting/src/sortingAlgorithms/BubbleSort.js"],"names":["useEffect","useState","useRecoilState","arrayToSortCommonState","sortedStatus","sortingTimeSpeed","sortingRunningStatus","AlgorithmSortingBox","swap","BubbleSort","mainArray","setMainArray","statusOfSorting","setStatusOfSorting","timeSpeed","array","setArray","algorithmRunStatus","loopInvokeStatus","setLoopInvokeStatus","comparisonCount","setComparisonCount","swapCount","setSwapCount","colorIndexesSettings","setColorIndexesSettings","compare","sorted","finalIndexes","timeOut","lengthOfArray","length","currentArray","i","j","setTimeout","k","push"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useRecoilState } from \"recoil\";\nimport { arrayToSortCommonState ,sortedStatus ,sortingTimeSpeed,sortingRunningStatus } from \"../common/commonData\";\nimport { AlgorithmSortingBox } from \"../components/algorithmSortingBox\";\nimport swap from \"../common/swap\";\n\n\nexport default function BubbleSort() {\n    let [mainArray,setMainArray] = useRecoilState(arrayToSortCommonState);\n    let [statusOfSorting,setStatusOfSorting] = useRecoilState(sortedStatus);\n    let timeSpeed = useRecoilState(sortingTimeSpeed);\n    let [array,setArray] = useState(mainArray);\n    let algorithmRunStatus = useRecoilState(sortingRunningStatus);\n    let [loopInvokeStatus,setLoopInvokeStatus] = useState(true);\n    let [comparisonCount,setComparisonCount] = useState(0);\n    let [swapCount,setSwapCount] = useState(0);\n    let [colorIndexesSettings,setColorIndexesSettings] = useState({\n        compare: [],\n        swap : [],\n        sorted : []\n    });\n    let finalIndexes = [];\n\n    useEffect(() => {\n        setArray(mainArray);\n    },[mainArray]);\n\n    // useEffect(() => {\n    //     setMainArray(array);\n    // },[array, setMainArray]);\n\n    if(algorithmRunStatus[0] && loopInvokeStatus) {\n        let timeOut = 1000;\n        const lengthOfArray = array.length;\n        const currentArray = array;\n            for(let i = 0; i < lengthOfArray ; i++) {\n                for(let j = 0 ; j < lengthOfArray-i-1  ; j++) {\n                    // eslint-disable-next-line \n                    setTimeout(() => {\n                        if(loopInvokeStatus) setLoopInvokeStatus(false);\n                        // console.log(currentArray);\n                        for(let k = array.length - 1 ; k > array.length - i - 1 ; k--) finalIndexes.push(k);\n                        // let comparedBoxesPosition = (i === array.length - 2) ? [] : [j,j+1];\n                        setComparisonCount(comparisonCount++);\n\n                        setColorIndexesSettings({\n                            compare: [j,j+1],\n                            swap : [],\n                            sorted : finalIndexes \n                        });\n\n                        if(currentArray[j] > currentArray[j+1]) { \n                            setSwapCount(swapCount++);\n                            swap(currentArray,j,j+1);\n                            setArray([...currentArray]);\n                        }\n                        if(i === lengthOfArray - 2 && j === lengthOfArray - i - 2)\n                        { \n                            setStatusOfSorting(true);\n                            \n                        }\n                    },  timeOut += timeSpeed[0]);\n                }    \n            }\n    }\n    return ( \n        <AlgorithmSortingBox array={array} comparisonCount={comparisonCount} swapCount={swapCount} colorIndexesSettings={colorIndexesSettings} />\n        )    \n}"]},"metadata":{},"sourceType":"module"}