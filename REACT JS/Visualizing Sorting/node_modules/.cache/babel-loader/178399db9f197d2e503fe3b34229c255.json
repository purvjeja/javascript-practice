{"ast":null,"code":"var _jsxFileName = \"/home/purvj/Documents/github-repositories/javascript-practice/REACT JS/Visualizing Sorting/src/sortingComponent.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport \"./sortingComponent.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SortingComponent() {\n  _s();\n\n  let [arrayToSort, setArrayToSort] = useState([4, 3, 2, 1, 0, -1, -2, -3, -4]);\n  let [compareBoxes, setComapareBoxes] = useState([]);\n\n  const updateSortingArea = () => {\n    let array = document.getElementById(\"arrayInput\").value.split(\",\");\n    array = array.map(arrayElement => parseInt(arrayElement));\n    setArrayToSort(array);\n  };\n\n  useEffect(() => {\n    console.log(arrayToSort);\n  });\n\n  const generateRandomNumber = () => {};\n\n  const setColor = index => {\n    if (compareBoxes.includes(index)) return {\n      'background-color': 'yellow'\n    };else return {\n      'background-color': 'grey'\n    };\n  };\n\n  const bubbleSort = () => {\n    let timeOut = 1000;\n    const n = arrayToSort.length;\n    const array = arrayToSort;\n\n    for (let i = 0; i <= n - 1; i++) {\n      for (let j = 0; j <= n - i - 1; j++) {\n        setTimeout(() => {\n          if (array[j] > array[j + 1]) swap(array, j, j + 1);\n          setComapareBoxes([j + 1, j + 2]);\n          setArrayToSort([...array]);\n        }, timeOut += 3000);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"arrayInput\",\n      type: \"text\",\n      onChange: updateSortingArea\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: generateRandomNumber,\n      children: \" Random Numbers \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"numberBoxArea\",\n      children: arrayToSort.map((arrayElement, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"box\",\n        style: setColor(index),\n        id: index,\n        children: [\" \", arrayElement, \" \"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 54\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: bubbleSort,\n      children: \"Start\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SortingComponent, \"9Y7kGsCJzThOW0Xfc5Onl6cOdFc=\");\n\n_c = SortingComponent;\n\nconst swap = (array, swapElementA, swapElementB) => {\n  const temp = array[swapElementA];\n  array[swapElementA] = array[swapElementB];\n  array[swapElementB] = temp;\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"SortingComponent\");","map":{"version":3,"sources":["/home/purvj/Documents/github-repositories/javascript-practice/REACT JS/Visualizing Sorting/src/sortingComponent.js"],"names":["useEffect","useState","SortingComponent","arrayToSort","setArrayToSort","compareBoxes","setComapareBoxes","updateSortingArea","array","document","getElementById","value","split","map","arrayElement","parseInt","console","log","generateRandomNumber","setColor","index","includes","bubbleSort","timeOut","n","length","i","j","setTimeout","swap","swapElementA","swapElementB","temp"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\"\nimport \"./sortingComponent.css\";\n\nexport default function SortingComponent() {\n    let [arrayToSort,setArrayToSort] = useState([4,3,2,1,0,-1,-2,-3,-4]);\n    let [compareBoxes,setComapareBoxes] = useState([]);\n\n\n\n    const updateSortingArea = () => {\n        let array = document.getElementById(\"arrayInput\").value.split(\",\");\n        array = array.map(arrayElement => parseInt(arrayElement));\n        setArrayToSort(array);\n    }   \n    \n    useEffect(() => {\n        console.log(arrayToSort);\n    });\n\n    const generateRandomNumber = () => {\n        \n    }\n\n    const setColor = (index) => {\n        if(compareBoxes.includes(index)) return {'background-color' : 'yellow'};\n        else return {'background-color' : 'grey'};\n    }\n    \n    const bubbleSort = () => {\n        let timeOut = 1000;\n        const n = arrayToSort.length;\n        const array = arrayToSort;\n        for(let i = 0; i <= n - 1 ; i++) {\n            for(let j = 0 ; j <= n-i-1 ; j++) {\n                setTimeout(() => {\n                    if(array[j] > array[j+1]) swap(array,j,j+1)          \n                    setComapareBoxes([j+1,j+2]);\n                    setArrayToSort([...array]);\n                },  timeOut += 3000);\n            }\n        }\n    }   \n\n    return (\n        <div>\n        <input id=\"arrayInput\" type=\"text\" onChange={updateSortingArea} /> \n        <button onClick={generateRandomNumber}> Random Numbers </button>\n        <div className=\"numberBoxArea\"> \n            {arrayToSort.map((arrayElement,index) => <div className=\"box\" key={index} style={setColor(index)} id={index}> {arrayElement} </div>)}\n        </div>\n        <button onClick={bubbleSort}>Start</button>\n       </div>\n    )       \n}\n\n\nconst swap = (array,swapElementA,swapElementB) => {\n    const temp = array[swapElementA];\n    array[swapElementA] = array[swapElementB];\n    array[swapElementB] = temp;         \n}"]},"metadata":{},"sourceType":"module"}