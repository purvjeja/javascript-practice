{"ast":null,"code":"var _jsxFileName = \"/home/purvj/Documents/github-repositories/javascript-practice/REACT JS/Visualizing Sorting/src/main.js\";\nimport \"./commonStyle.css\"; // import ControlInput from \"./components/inputControlerComponent\";\n// import TimeSpeedController from \"./components/timeSpeed\";\n\nimport { arrayToSort } from \"./common/commonData\";\nimport NavigationComponent from \"./components/navigationComponent\";\nimport AlgorithmBox from \"./common/algorithmSortingBox\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Main() {\n  // let [array,setArray] = useState(arrayToSort);\n  // let [ithIndex,setIthIndex] = useState(0);\n  // let [jthIndex,setJthIndex] = useState(0);\n  // useEffect(() => {\n  //     const finalIndexes = [];\n  //     for(let i = arrayToSort.length - 1 ; i > arrayToSort.length - ithIndex - 1 ; i-- ) finalIndexes.push(i);\n  //     const comparedBoxesPosition = (ithIndex === arrayToSort.length-2) ? [] : [jthIndex,jthIndex+1];\n  //     colorIndexesSettings.compareColorIndex = comparedBoxesPosition;\n  //     colorIndexesSettings.swapColorIndex = comparedBoxesPosition;\n  //     colorIndexesSettings.sortedColorIndex = finalIndexes;\n  // },[ithIndex,jthIndex,array]);\n  // const generateRandomNumber = () => {\n  //     liveAlgorithmData.sortedStatus = false;\n  //     let randomNumberArray = [];\n  //     for(let i = 0 ; i < 10 ; i++) {\n  //         randomNumberArray.push(parseInt(Math.random() * 100));\n  //     }\n  //     document.getElementById(\"arrayInput\").value = randomNumberArray.toString(); \n  //     setArray(randomNumberArray);\n  // }\n  // const bubbleSort = () => {\n  //     let timeOut = 1000;\n  //     const n = array.length;\n  //     const currentArray = array;\n  //     for(let i = 0; i < n ; i++) {\n  //         for(let j = 0 ; j < n-i-1  ; j++) {\n  //             setTimeout(() => {\n  //                 setIthIndex(i);\n  //                 setJthIndex(j);\n  //                 if(currentArray[j] > currentArray[j+1]) swap(currentArray,j,j+1);\n  //                 setArray([...currentArray]);\n  //                 if(i === n - 2 && j === n - i - 2) liveAlgorithmData.sortedStatus = true;\n  //             },  timeOut += parseInt(liveAlgorithmData.speedTimeCount));\n  //         }    \n  //     }\n  // }   \n  const updateSortingArea = () => {\n    let tempArray = document.getElementById(\"arrayInput\").value.split(\",\");\n    tempArray = arrayToSort.map(arrayElement => parseInt(arrayElement));\n    arrayToSort.value = tempArray;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(NavigationComponent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"areaOfAlgorithmsVisualization\",\n      children: /*#__PURE__*/_jsxDEV(AlgorithmBox, {\n        array: arrayToSort\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n}\n_c = Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["/home/purvj/Documents/github-repositories/javascript-practice/REACT JS/Visualizing Sorting/src/main.js"],"names":["arrayToSort","NavigationComponent","AlgorithmBox","Main","updateSortingArea","tempArray","document","getElementById","value","split","map","arrayElement","parseInt"],"mappings":";AAAA,OAAO,mBAAP,C,CACA;AACA;;AACA,SAASA,WAAT,QAA4B,qBAA5B;AACA,OAAOC,mBAAP,MAAgC,kCAAhC;AACA,OAAOC,YAAP,MAAyB,8BAAzB;;AAEA,eAAe,SAASC,IAAT,GAAgB;AAC3B;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAMC,iBAAiB,GAAG,MAAM;AAC5B,QAAIC,SAAS,GAAGC,QAAQ,CAACC,cAAT,CAAwB,YAAxB,EAAsCC,KAAtC,CAA4CC,KAA5C,CAAkD,GAAlD,CAAhB;AACAJ,IAAAA,SAAS,GAAGL,WAAW,CAACU,GAAZ,CAAgBC,YAAY,IAAIC,QAAQ,CAACD,YAAD,CAAxC,CAAZ;AACAX,IAAAA,WAAW,CAACQ,KAAZ,GAAoBH,SAApB;AACH,GAJD;;AAMA,sBACI;AAAA,4BAEI,QAAC,mBAAD;AAAA;AAAA;AAAA;AAAA,YAFJ,eAUI;AAAK,MAAA,SAAS,EAAC,+BAAf;AAAA,6BACI,QAAC,YAAD;AAAc,QAAA,KAAK,EAAEL;AAArB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAVJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAgBH;KAlEuBG,I","sourcesContent":["import \"./commonStyle.css\";\n// import ControlInput from \"./components/inputControlerComponent\";\n// import TimeSpeedController from \"./components/timeSpeed\";\nimport { arrayToSort } from \"./common/commonData\";\nimport NavigationComponent from \"./components/navigationComponent\";\nimport AlgorithmBox from \"./common/algorithmSortingBox\";\n\nexport default function Main() {\n    // let [array,setArray] = useState(arrayToSort);\n    // let [ithIndex,setIthIndex] = useState(0);\n    // let [jthIndex,setJthIndex] = useState(0);\n\n\n    // useEffect(() => {\n    //     const finalIndexes = [];\n    //     for(let i = arrayToSort.length - 1 ; i > arrayToSort.length - ithIndex - 1 ; i-- ) finalIndexes.push(i);\n    //     const comparedBoxesPosition = (ithIndex === arrayToSort.length-2) ? [] : [jthIndex,jthIndex+1];\n\n    //     colorIndexesSettings.compareColorIndex = comparedBoxesPosition;\n    //     colorIndexesSettings.swapColorIndex = comparedBoxesPosition;\n    //     colorIndexesSettings.sortedColorIndex = finalIndexes;\n        \n    // },[ithIndex,jthIndex,array]);\n\n\n    // const generateRandomNumber = () => {\n    //     liveAlgorithmData.sortedStatus = false;\n    //     let randomNumberArray = [];\n    //     for(let i = 0 ; i < 10 ; i++) {\n    //         randomNumberArray.push(parseInt(Math.random() * 100));\n    //     }\n    //     document.getElementById(\"arrayInput\").value = randomNumberArray.toString(); \n    //     setArray(randomNumberArray);\n    // }\n\n    // const bubbleSort = () => {\n    //     let timeOut = 1000;\n    //     const n = array.length;\n    //     const currentArray = array;\n    //     for(let i = 0; i < n ; i++) {\n    //         for(let j = 0 ; j < n-i-1  ; j++) {\n    //             setTimeout(() => {\n    //                 setIthIndex(i);\n    //                 setJthIndex(j);\n    //                 if(currentArray[j] > currentArray[j+1]) swap(currentArray,j,j+1);\n    //                 setArray([...currentArray]);\n    //                 if(i === n - 2 && j === n - i - 2) liveAlgorithmData.sortedStatus = true;\n    //             },  timeOut += parseInt(liveAlgorithmData.speedTimeCount));\n    //         }    \n    //     }\n    // }   \n    const updateSortingArea = () => {\n        let tempArray = document.getElementById(\"arrayInput\").value.split(\",\");\n        tempArray = arrayToSort.map(arrayElement => parseInt(arrayElement));\n        arrayToSort.value = tempArray;\n    }   \n\n    return (\n        <div>\n            \n            <NavigationComponent />\n\n            {/* <ControlInput />  */}\n            {/* <button onClick={generateRandomNumber}>Random Numbers</button>    \n            {/* <input id=\"arrayInput\" type=\"text\" onChange={updateSortingArea}/> */}\n            {/* <button onClick={bubbleSort}>Start</button> */}\n            {/* <TimeSpeedController /> */}\n            \n            <div className=\"areaOfAlgorithmsVisualization\">\n                <AlgorithmBox array={arrayToSort} />\n            </div>\n       </div>\n    )       \n}"]},"metadata":{},"sourceType":"module"}