{"ast":null,"code":"var _jsxFileName = \"/home/purvj/Documents/github-repositories/javascript-practice/REACT JS/Visualizing Sorting/src/main.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport \"./commonStyle.css\";\nimport swap from \"./swap\";\nimport TimeSpeed from \"./timeSpeed\";\nimport { data } from \"./liveData\";\nimport NavigationComponent from \"./navigationComponent\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SortingComponent() {\n  _s();\n\n  let [arrayToSort, setArrayToSort] = useState([4, 3, 2, 1, 0, -1, -2, -3, -4]); // let [sortedStatus,setSortedStatus] = useState(false);\n\n  let [operationIndex, setOperationIndex] = useState({\n    compareColorIndex: [],\n    swapColorIndex: [],\n    sortedColorIndex: []\n  });\n  let [ithIndex, setIthIndex] = useState(0);\n  let [jthIndex, setJthIndex] = useState(0);\n  let [timeCounter, setTimeCounter] = useState(data.speedTimeCount); // const nameOfAlgorithms = [\n  //     {name : 'bubbleSort'},\n  //     {name : 'selectionSort'},\n  //     {name : 'insertionSort'},\n  //     {name : 'heapSort'},\n  //     {name : 'mergeSort'},\n  //     {name : 'quickSort'}\n  // ];\n\n  const updateSortingArea = () => {\n    let array = document.getElementById(\"arrayInput\").value.split(\",\");\n    array = array.map(arrayElement => parseInt(arrayElement));\n    setArrayToSort(array);\n  };\n\n  useEffect(() => {\n    const finalIndexes = [];\n\n    for (let i = arrayToSort.length - 1; i > arrayToSort.length - ithIndex - 1; i--) finalIndexes.push(i);\n\n    const comparedBoxesPosition = ithIndex === arrayToSort.length - 2 ? [] : [jthIndex, jthIndex + 1];\n    setOperationIndex({\n      compareColorIndex: comparedBoxesPosition,\n      swapColorIndex: comparedBoxesPosition,\n      sortedColorIndex: finalIndexes\n    });\n  }, [ithIndex, jthIndex, arrayToSort]);\n\n  const generateRandomNumber = () => {\n    setSortedStatus(false);\n    let randomNumberArray = [];\n\n    for (let i = 0; i < 10; i++) {\n      randomNumberArray.push(parseInt(Math.random() * 100));\n    }\n\n    document.getElementById(\"arrayInput\").value = randomNumberArray.toString();\n    setOperationIndex({\n      compareColorIndex: [],\n      swapColorIndex: [],\n      sortedColorIndex: []\n    });\n    setArrayToSort(randomNumberArray);\n  }; // const setColor = (index) => { \n  //     return {backgroundColor : (operationIndex.compareColorIndex.includes(index)? 'pink' : \n  //                               (operationIndex.swapColorIndex.includes(index)) ? 'yellow' : \n  //                               (operationIndex.sortedColorIndex.includes(index) || sortedStatus ) ? 'green' : 'grey') }; \n  // }\n\n\n  const bubbleSort = () => {\n    let timeOut = 500;\n    const n = arrayToSort.length;\n    const array = arrayToSort;\n\n    for (let i = 0; i < n; i++) {\n      for (let j = 0; j < n - i - 1; j++) {\n        setTimeout(() => {\n          setIthIndex(i);\n          setJthIndex(j);\n          setTimeCounter(data.speedTimeCount);\n          console.log(data.speedTimeCount);\n          if (array[j] > array[j + 1]) swap(array, j, j + 1);\n          setArrayToSort([...array]);\n          if (i === n - 2 && j === n - i - 2) setSortedStatus(true);\n        }, timeOut += data.speedTimeCount);\n      }\n    }\n  }; // const NumberBox = (props) => {\n  //     return (\n  //         <div className=\"box\" id={props.index} style={setColor(props.index)}>\n  //             {props.content}\n  //         </div>\n  //     )\n  // }  \n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(NavigationComponent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"inputControllerComponent\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: generateRandomNumber,\n        children: \"Random Numbers\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"arrayInput\",\n        type: \"text\",\n        onChange: updateSortingArea\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: bubbleSort,\n        children: \"Start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(TimeSpeed, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"areaOfAlgorithmsVisualization\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SortingComponent, \"7iO80qvYSgUa3hCvYRp7QuiyrPc=\");\n\n_c = SortingComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"SortingComponent\");","map":{"version":3,"sources":["/home/purvj/Documents/github-repositories/javascript-practice/REACT JS/Visualizing Sorting/src/main.js"],"names":["useEffect","useState","swap","TimeSpeed","data","NavigationComponent","SortingComponent","arrayToSort","setArrayToSort","operationIndex","setOperationIndex","compareColorIndex","swapColorIndex","sortedColorIndex","ithIndex","setIthIndex","jthIndex","setJthIndex","timeCounter","setTimeCounter","speedTimeCount","updateSortingArea","array","document","getElementById","value","split","map","arrayElement","parseInt","finalIndexes","i","length","push","comparedBoxesPosition","generateRandomNumber","setSortedStatus","randomNumberArray","Math","random","toString","bubbleSort","timeOut","n","j","setTimeout","console","log"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\"\nimport \"./commonStyle.css\";\nimport swap from \"./swap\";\nimport TimeSpeed from \"./timeSpeed\";\nimport { data } from \"./liveData\";\nimport NavigationComponent from \"./navigationComponent\";\n\nexport default function SortingComponent() {\n    let [arrayToSort,setArrayToSort] = useState([4,3,2,1,0,-1,-2,-3,-4]);\n    // let [sortedStatus,setSortedStatus] = useState(false);\n    let [operationIndex,setOperationIndex] = useState({\n        compareColorIndex : [],\n        swapColorIndex : [],\n        sortedColorIndex : []\n    });\n    let [ithIndex,setIthIndex] = useState(0);\n    let [jthIndex,setJthIndex] = useState(0);\n    let [timeCounter,setTimeCounter] = useState(data.speedTimeCount);\n\n        // const nameOfAlgorithms = [\n        //     {name : 'bubbleSort'},\n        //     {name : 'selectionSort'},\n        //     {name : 'insertionSort'},\n        //     {name : 'heapSort'},\n        //     {name : 'mergeSort'},\n        //     {name : 'quickSort'}\n        // ];\n\n    const updateSortingArea = () => {\n        let array = document.getElementById(\"arrayInput\").value.split(\",\");\n        array = array.map(arrayElement => parseInt(arrayElement));\n        setArrayToSort(array);\n    }   \n\n    useEffect(() => {\n        const finalIndexes = [];\n        for(let i = arrayToSort.length - 1 ; i > arrayToSort.length - ithIndex - 1 ; i-- ) finalIndexes.push(i);\n        const comparedBoxesPosition = (ithIndex === arrayToSort.length-2) ? [] : [jthIndex,jthIndex+1];\n\n        setOperationIndex({\n            compareColorIndex : comparedBoxesPosition,\n            swapColorIndex : comparedBoxesPosition,\n            sortedColorIndex : finalIndexes,\n        })\n    },[ithIndex,jthIndex,arrayToSort]);\n\n\n    const generateRandomNumber = () => {\n        setSortedStatus(false);\n        let randomNumberArray = [];\n        for(let i = 0 ; i < 10 ; i++) {\n            randomNumberArray.push(parseInt(Math.random() * 100));\n        }\n        document.getElementById(\"arrayInput\").value = randomNumberArray.toString(); \n        setOperationIndex({\n            compareColorIndex : [],\n            swapColorIndex : [],\n            sortedColorIndex : [], \n        });\n        setArrayToSort(randomNumberArray);\n    }\n\n\n    // const setColor = (index) => { \n    //     return {backgroundColor : (operationIndex.compareColorIndex.includes(index)? 'pink' : \n    //                               (operationIndex.swapColorIndex.includes(index)) ? 'yellow' : \n    //                               (operationIndex.sortedColorIndex.includes(index) || sortedStatus ) ? 'green' : 'grey') }; \n    // }\n\n    const bubbleSort = () => {\n        let timeOut = 500;\n        const n = arrayToSort.length;\n        const array = arrayToSort;\n        for(let i = 0; i < n ; i++) {\n            for(let j = 0 ; j < n-i-1  ; j++) {\n                setTimeout(() => {\n                    setIthIndex(i);\n                    setJthIndex(j);\n                    setTimeCounter(data.speedTimeCount);\n                    console.log( data.speedTimeCount);\n                    if(array[j] > array[j+1]) swap(array,j,j+1);          \n                    setArrayToSort([...array]);\n                    if(i === n - 2 && j === n - i - 2) setSortedStatus(true);\n                },  timeOut += data.speedTimeCount);\n            }    \n        }\n    }   \n\n    // const NumberBox = (props) => {\n    //     return (\n    //         <div className=\"box\" id={props.index} style={setColor(props.index)}>\n    //             {props.content}\n    //         </div>\n    //     )\n    // }  \n\n\n    return (\n        <div>\n            \n            <NavigationComponent />\n            <div className=\"inputControllerComponent\" >\n            <button onClick={generateRandomNumber}>Random Numbers</button>    \n            <input id=\"arrayInput\" type=\"text\" onChange={updateSortingArea}/>\n            <button onClick={bubbleSort}>Start</button>\n            <TimeSpeed />\n             </div>\n            \n            <div className=\"areaOfAlgorithmsVisualization\">\n                {/* <div className=\"sortingBlockBox\">\n                    <div className=\"sortingInformationOne\">\n                        <div className=\"sortingHeader\"><b><u>Bubble Sort Algorithm</u></b></div>\n                        <div className=\"sortingTime\">Time : {}</div>\n                    </div>\n                <div className=\"numberBoxArea\"> \n                    {arrayToSort.map((arrayElement,index) => <div key={index}>  <NumberBox index={index} content={arrayElement}  /> </div>)}\n                </div>\n                <div className=\"sortingInformationTwo\">\n                    <div className=\"sortingSwaps\"> Swaps : {} </div>\n                    <div className=\"sortingComparison\">Comparisions : {} </div>\n                </div>   */}\n            {/* </div> */}\n            </div>\n       </div>\n    )       \n}"]},"metadata":{},"sourceType":"module"}