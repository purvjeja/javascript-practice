{"ast":null,"code":"var _jsxFileName = \"/home/purvj/Documents/github-repositories/javascript-practice/REACT JS/Visualizing Sorting/src/components/inputControlerComponent.js\",\n    _s = $RefreshSig$();\n\nimport \"../commonStyle.css\";\nimport bubbleSort from \"../sortingAlgorithms/BubbleSort\";\nimport TimeSpeed from \"./timeSpeed\";\nimport { arrayToSortCommonState } from \"../common/commonData\";\nimport { useRecoilState } from \"recoil\";\nimport { AlgorithmSortingArea } from \"./algorithmSortingBox\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ControlInput() {\n  _s();\n\n  let [array, setArray] = useRecoilState(arrayToSortCommonState);\n\n  const generateRandomNumber = () => {\n    // liveAlgorithmData.sortedStatus = false;\n    let randomNumberArray = [];\n\n    for (let i = 0; i < 10; i++) randomNumberArray.push(parseInt(Math.random() * 100));\n\n    document.getElementById(\"arrayInput\").value = randomNumberArray.toString(); // colorIndexesSettings.compareColorIndex = [];\n    // colorIndexesSettings.sortedColorIndex = [];\n    // colorIndexesSettings.swapColorIndex = [];  \n\n    setArray([...randomNumberArray]);\n    return randomNumberArray;\n  };\n\n  const updateSortingArea = () => {\n    let tempArray = document.getElementById(\"arrayInput\").value.split(\",\");\n    tempArray = tempArray.map(arrayElement => isNaN(parseInt(arrayElement)) ? \"\" : parseInt(arrayElement));\n    console.log(tempArray);\n    setArray([...tempArray]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"inputControllerComponent\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"arrayInput\",\n      type: \"text\",\n      defaultValue: array,\n      onChange: updateSortingArea\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => generateRandomNumber(),\n      children: \" Random Numbers \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => AlgorithmSortingArea,\n      children: \"Start\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TimeSpeed, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ControlInput, \"jSFDKetl29S/Pn88Kiznn1vGvEg=\", false, function () {\n  return [useRecoilState];\n});\n\n_c = ControlInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"ControlInput\");","map":{"version":3,"sources":["/home/purvj/Documents/github-repositories/javascript-practice/REACT JS/Visualizing Sorting/src/components/inputControlerComponent.js"],"names":["bubbleSort","TimeSpeed","arrayToSortCommonState","useRecoilState","AlgorithmSortingArea","ControlInput","array","setArray","generateRandomNumber","randomNumberArray","i","push","parseInt","Math","random","document","getElementById","value","toString","updateSortingArea","tempArray","split","map","arrayElement","isNaN","console","log"],"mappings":";;;AAAA,OAAO,oBAAP;AACA,OAAOA,UAAP,MAAuB,iCAAvB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAASC,sBAAT,QAAuC,sBAAvC;AACA,SAASC,cAAT,QAA+B,QAA/B;AACA,SAASC,oBAAT,QAAqC,uBAArC;;AAEA,eAAe,SAASC,YAAT,GAAwB;AAAA;;AAEnC,MAAI,CAACC,KAAD,EAAOC,QAAP,IAAmBJ,cAAc,CAACD,sBAAD,CAArC;;AAEA,QAAMM,oBAAoB,GAAG,MAAM;AAC/B;AACA,QAAIC,iBAAiB,GAAG,EAAxB;;AACA,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAgBA,CAAC,GAAG,EAApB,EAAyBA,CAAC,EAA1B,EAA8BD,iBAAiB,CAACE,IAAlB,CAAuBC,QAAQ,CAACC,IAAI,CAACC,MAAL,KAAgB,GAAjB,CAA/B;;AAC9BC,IAAAA,QAAQ,CAACC,cAAT,CAAwB,YAAxB,EAAsCC,KAAtC,GAA8CR,iBAAiB,CAACS,QAAlB,EAA9C,CAJ+B,CAK/B;AACA;AACA;;AACAX,IAAAA,QAAQ,CAAC,CAAC,GAAGE,iBAAJ,CAAD,CAAR;AAEA,WAAOA,iBAAP;AACH,GAXD;;AAaA,QAAMU,iBAAiB,GAAG,MAAM;AAC5B,QAAIC,SAAS,GAAGL,QAAQ,CAACC,cAAT,CAAwB,YAAxB,EAAsCC,KAAtC,CAA4CI,KAA5C,CAAkD,GAAlD,CAAhB;AACAD,IAAAA,SAAS,GAAGA,SAAS,CAACE,GAAV,CAAcC,YAAY,IAAKC,KAAK,CAACZ,QAAQ,CAACW,YAAD,CAAT,CAAN,GAAkC,EAAlC,GAAuCX,QAAQ,CAACW,YAAD,CAA7E,CAAZ;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYN,SAAZ;AACAb,IAAAA,QAAQ,CAAC,CAAC,GAAGa,SAAJ,CAAD,CAAR;AACH,GALD;;AAMA,sBACI;AAAK,IAAA,SAAS,EAAC,0BAAf;AAAA,4BACI;AAAO,MAAA,EAAE,EAAC,YAAV;AAAuB,MAAA,IAAI,EAAC,MAA5B;AAAmC,MAAA,YAAY,EAAEd,KAAjD;AAAwD,MAAA,QAAQ,EAAEa;AAAlE;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAQ,MAAA,OAAO,EAAE,MAAMX,oBAAoB,EAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAQ,MAAA,OAAO,EAAE,MAAMJ,oBAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ,eAII,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH;;GA/BuBC,Y;UAEGF,c;;;KAFHE,Y","sourcesContent":["import \"../commonStyle.css\"; \nimport bubbleSort from \"../sortingAlgorithms/BubbleSort\";\nimport TimeSpeed from \"./timeSpeed\";\nimport { arrayToSortCommonState } from \"../common/commonData\";\nimport { useRecoilState } from \"recoil\";\nimport { AlgorithmSortingArea } from \"./algorithmSortingBox\";\n\nexport default function ControlInput() {\n    \n    let [array,setArray] = useRecoilState(arrayToSortCommonState);\n\n    const generateRandomNumber = () => {\n        // liveAlgorithmData.sortedStatus = false;\n        let randomNumberArray = [];\n        for(let i = 0 ; i < 10 ; i++) randomNumberArray.push(parseInt(Math.random() * 100));\n        document.getElementById(\"arrayInput\").value = randomNumberArray.toString(); \n        // colorIndexesSettings.compareColorIndex = [];\n        // colorIndexesSettings.sortedColorIndex = [];\n        // colorIndexesSettings.swapColorIndex = [];  \n        setArray([...randomNumberArray]);\n\n        return randomNumberArray;\n    }\n\n    const updateSortingArea = () => {\n        let tempArray = document.getElementById(\"arrayInput\").value.split(\",\");\n        tempArray = tempArray.map(arrayElement => (isNaN(parseInt(arrayElement))) ? \"\" : parseInt(arrayElement) );\n        console.log(tempArray);\n        setArray([...tempArray]);\n    }\n    return (\n        <div className=\"inputControllerComponent\">\n            <input id=\"arrayInput\" type=\"text\" defaultValue={array} onChange={updateSortingArea} /> \n            <button onClick={() => generateRandomNumber()}> Random Numbers </button>\n            <button onClick={() => AlgorithmSortingArea}>Start</button>\n            <TimeSpeed />\n        </div>\n    )\n}   "]},"metadata":{},"sourceType":"module"}