{"ast":null,"code":"var _jsxFileName = \"/home/purvj/Documents/github-repositories/javascript-practice/REACT JS/Visualizing Sorting/src/sortingComponent.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport \"./sortingComponent.css\";\nimport swap from \"./swap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SortingComponent() {\n  _s();\n\n  let [arrayToSort, setArrayToSort] = useState([4, 3, 2, 1, 0, -1, -2, -3, -4]);\n  let [compareBoxes, setComapareBoxes] = useState([]);\n  let [completedIteration, setcompletedIteration] = useState(0);\n  let [sortedStatus, setSortedStatus] = useState(false); // let [operationIndex,setOperationIndex] = useState({\n  //     compareColorIndex : [],\n  //     swapColorIndex : [],\n  //     sortedColorIndex : []\n  // });\n\n  let [ithIndex, setIthIndex] = useState(0);\n  let [jthIndex, setJthIndex] = useState(0);\n\n  const updateSortingArea = () => {\n    let array = document.getElementById(\"arrayInput\").value.split(\",\");\n    array = array.map(arrayElement => parseInt(arrayElement));\n    setArrayToSort(array);\n  };\n\n  useEffect(() => {\n    console.log(arrayToSort);\n  });\n\n  const generateRandomNumber = () => {\n    setSortedStatus(false);\n    let randomNumberArray = [];\n\n    for (let i = 0; i < 10; i++) {\n      randomNumberArray.push(parseInt(Math.random() * 100));\n    }\n\n    document.getElementById(\"arrayInput\").value = randomNumberArray.toString();\n    setArrayToSort(randomNumberArray);\n  };\n\n  const setColor = index => {\n    if (compareBoxes.includes(index)) return {\n      backgroundColor: 'yellow'\n    };else if (arrayToSort.length - 1 - completedIteration < index && index <= arrayToSort.length - 1 || sortedStatus) return {\n      backgroundColor: 'green'\n    };else return {\n      backgroundColor: 'grey'\n    };\n  };\n\n  const NumberBox = props => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"box\",\n      id: props.index,\n      style: setColor(props.index),\n      children: props.content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this);\n  };\n\n  const bubbleSort = () => {\n    let timeOut = 500;\n    let comparedBoxesPosition = [];\n    const n = arrayToSort.length;\n    const array = arrayToSort;\n\n    const findSortedArray = indexCompleted => {\n      let finalIndexes = [];\n\n      for (let i = n - 1; i < arrayToSort.length - indexCompleted; i--) finalIndexes.push(i);\n\n      return finalIndexes;\n    };\n\n    for (let i = 0; i < n; i++) {\n      for (let j = 0; j < n - i - 1; j++) {\n        // eslint-disable-next-line no-loop-func\n        setTimeout(() => {\n          comparedBoxesPosition = i === n - 2 ? [] : [j, j + 1];\n          setComapareBoxes(comparedBoxesPosition);\n          setIthIndex(i);\n          setJthIndex(j); // setOperationIndex({\n          //     compareColorIndex : comparedBoxesPosition,\n          //     swapColorIndex : [],\n          //     sortedColorIndex : findSortedArray(i)\n          // });\n\n          if (array[j] > array[j + 1]) swap(array, j, j + 1);\n          setArrayToSort([...array]);\n          setcompletedIteration(i);\n          if (i === n - 2 && j === n - i - 2) setSortedStatus(true);\n        }, timeOut += 1000);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"arrayInput\",\n      type: \"text\",\n      onChange: updateSortingArea\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"numberBoxArea\",\n      children: arrayToSort.map((arrayElement, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"  \", /*#__PURE__*/_jsxDEV(NumberBox, {\n          index: index,\n          content: arrayElement\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 73\n        }, this), \" \"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 54\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: bubbleSort,\n      children: \"Start\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: generateRandomNumber,\n      children: \" Random Numbers \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SortingComponent, \"pQMPT0w0Bg4dzbz2tpCl27+BRf0=\");\n\n_c = SortingComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"SortingComponent\");","map":{"version":3,"sources":["/home/purvj/Documents/github-repositories/javascript-practice/REACT JS/Visualizing Sorting/src/sortingComponent.js"],"names":["useEffect","useState","swap","SortingComponent","arrayToSort","setArrayToSort","compareBoxes","setComapareBoxes","completedIteration","setcompletedIteration","sortedStatus","setSortedStatus","ithIndex","setIthIndex","jthIndex","setJthIndex","updateSortingArea","array","document","getElementById","value","split","map","arrayElement","parseInt","console","log","generateRandomNumber","randomNumberArray","i","push","Math","random","toString","setColor","index","includes","backgroundColor","length","NumberBox","props","content","bubbleSort","timeOut","comparedBoxesPosition","n","findSortedArray","indexCompleted","finalIndexes","j","setTimeout"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\"\nimport \"./sortingComponent.css\";\nimport swap from \"./swap\";\n\nexport default function SortingComponent() {\n    let [arrayToSort,setArrayToSort] = useState([4,3,2,1,0,-1,-2,-3,-4]);\n    let [compareBoxes,setComapareBoxes] = useState([]);\n    let [completedIteration,setcompletedIteration] = useState(0);\n    let [sortedStatus,setSortedStatus] = useState(false);\n    // let [operationIndex,setOperationIndex] = useState({\n    //     compareColorIndex : [],\n    //     swapColorIndex : [],\n    //     sortedColorIndex : []\n    // });\n    let [ithIndex,setIthIndex] = useState(0);\n    let [jthIndex,setJthIndex] = useState(0);\n\n    const updateSortingArea = () => {\n        let array = document.getElementById(\"arrayInput\").value.split(\",\");\n        array = array.map(arrayElement => parseInt(arrayElement));\n        setArrayToSort(array);\n    }   \n    \n    useEffect(() => {\n        console.log(arrayToSort);\n    });\n\n    const generateRandomNumber = () => {\n        setSortedStatus(false);\n        let randomNumberArray = [];\n        for(let i = 0 ; i < 10 ; i++) {\n            randomNumberArray.push(parseInt(Math.random() * 100));\n        }\n        document.getElementById(\"arrayInput\").value = randomNumberArray.toString(); \n        setArrayToSort(randomNumberArray);\n    }\n\n    const setColor = (index) => { \n        if(compareBoxes.includes(index)) return {backgroundColor : 'yellow'};\n        else if((((arrayToSort.length - 1) - completedIteration) < index && index <= arrayToSort.length - 1) || sortedStatus) return {backgroundColor : 'green'}; \n        else return {backgroundColor : 'grey'};\n    }\n    \n    const NumberBox = (props) => {\n        return (\n            <div className=\"box\" id={props.index} style={setColor(props.index)}>\n                {props.content}\n            </div>\n        )\n    }   \n\n    const bubbleSort = () => {\n        let timeOut = 500;\n        let comparedBoxesPosition = [];\n        const n = arrayToSort.length;\n        const array = arrayToSort;\n\n        const findSortedArray = (indexCompleted) => {\n            let finalIndexes=[];\n            for(let i = n-1 ; i < arrayToSort.length - indexCompleted ; i-- ) finalIndexes.push(i)\n            return finalIndexes;\n        }\n\n        for(let i = 0; i < n ; i++) {\n            for(let j = 0 ; j < n-i-1  ; j++) {\n                // eslint-disable-next-line no-loop-func\n                setTimeout(() => {\n                    comparedBoxesPosition = (i === n-2) ? [] : [j,j+1];\n                    setComapareBoxes(comparedBoxesPosition);\n                    setIthIndex(i);\n                    setJthIndex(j);\n                    // setOperationIndex({\n                    //     compareColorIndex : comparedBoxesPosition,\n                    //     swapColorIndex : [],\n                    //     sortedColorIndex : findSortedArray(i)\n                    // });\n                    if(array[j] > array[j+1]) swap(array,j,j+1);          \n                    setArrayToSort([...array]);\n                    setcompletedIteration(i); \n                    if(i === n - 2 && j === n - i - 2) setSortedStatus(true);\n                },  timeOut += 1000);\n            }    \n        }\n    }   \n\n    return (\n        <div>\n        <input id=\"arrayInput\" type=\"text\" onChange={updateSortingArea} /> \n\n        <div className=\"numberBoxArea\"> \n            {arrayToSort.map((arrayElement,index) => <div key={index}>  <NumberBox index={index} content={arrayElement}  /> </div>)}\n        </div>\n        <button onClick={bubbleSort}>Start</button>\n        <button onClick={generateRandomNumber}> Random Numbers </button>\n       </div>\n    )       \n}"]},"metadata":{},"sourceType":"module"}