{"ast":null,"code":"var _jsxFileName = \"/home/purvj/Documents/github-repositories/javascript-practice/REACT JS/Visualizing Sorting/src/main.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport \"./commonStyle.css\";\nimport swap from \"./swap\";\nimport TimeSpeed from \"./timeSpeed\";\nimport { liveAlgorithmData, arrayToSort } from \"./common/commonData\";\nimport { colorIndexesSettings } from \"./common/commonData\";\nimport NavigationComponent from \"./navigationComponent\";\nimport AlgorithmBox from \"./common/algorithmSortingBox\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SortingComponent() {\n  _s();\n\n  let [array, setArray] = useState(arrayToSort);\n  let [ithIndex, setIthIndex] = useState(0);\n  let [jthIndex, setJthIndex] = useState(0);\n\n  const updateSortingArea = () => {\n    let Temparray = document.getElementById(\"arrayInput\").value.split(\",\");\n    Temparray = array.map(arrayElement => parseInt(arrayElement));\n    setArray(Temparray);\n  };\n\n  useEffect(() => {\n    const finalIndexes = [];\n\n    for (let i = arrayToSort.length - 1; i > arrayToSort.length - ithIndex - 1; i--) finalIndexes.push(i);\n\n    const comparedBoxesPosition = ithIndex === arrayToSort.length - 2 ? [] : [jthIndex, jthIndex + 1];\n    colorIndexesSettings.compareColorIndex = comparedBoxesPosition;\n    colorIndexesSettings.swapColorIndex = comparedBoxesPosition;\n    colorIndexesSettings.sortedColorIndex = finalIndexes;\n  }, [ithIndex, jthIndex, array]);\n\n  const generateRandomNumber = () => {\n    liveAlgorithmData.sortedStatus = false;\n    let randomNumberArray = [];\n\n    for (let i = 0; i < 10; i++) {\n      randomNumberArray.push(parseInt(Math.random() * 100));\n    }\n\n    document.getElementById(\"arrayInput\").value = randomNumberArray.toString();\n    setArray(randomNumberArray);\n  };\n\n  const bubbleSort = () => {\n    let timeOut = 1000;\n    const n = array.length;\n    const currentArray = array;\n\n    for (let i = 0; i < n; i++) {\n      for (let j = 0; j < n - i - 1; j++) {\n        setTimeout(() => {\n          setIthIndex(i);\n          setJthIndex(j);\n          if (currentArray[j] > currentArray[j + 1]) swap(currentArray, j, j + 1);\n          setArray([...currentArray]);\n          if (i === n - 2 && j === n - i - 2) liveAlgorithmData.sortedStatus = true;\n        }, timeOut += parseInt(liveAlgorithmData.speedTimeCount));\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(NavigationComponent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"inputControllerComponent\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"areaOfAlgorithmsVisualization\",\n      children: /*#__PURE__*/_jsxDEV(AlgorithmBox, {\n        array: array\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SortingComponent, \"4mm7oXWbGuOAlkI7tZdNzGO6kvY=\");\n\n_c = SortingComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"SortingComponent\");","map":{"version":3,"sources":["/home/purvj/Documents/github-repositories/javascript-practice/REACT JS/Visualizing Sorting/src/main.js"],"names":["useEffect","useState","swap","TimeSpeed","liveAlgorithmData","arrayToSort","colorIndexesSettings","NavigationComponent","AlgorithmBox","SortingComponent","array","setArray","ithIndex","setIthIndex","jthIndex","setJthIndex","updateSortingArea","Temparray","document","getElementById","value","split","map","arrayElement","parseInt","finalIndexes","i","length","push","comparedBoxesPosition","compareColorIndex","swapColorIndex","sortedColorIndex","generateRandomNumber","sortedStatus","randomNumberArray","Math","random","toString","bubbleSort","timeOut","n","currentArray","j","setTimeout","speedTimeCount"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAO,mBAAP;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAASC,iBAAT,EAA2BC,WAA3B,QAA8C,qBAA9C;AACA,SAASC,oBAAT,QAAqC,qBAArC;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;AACA,OAAOC,YAAP,MAAyB,8BAAzB;;AAEA,eAAe,SAASC,gBAAT,GAA4B;AAAA;;AACvC,MAAI,CAACC,KAAD,EAAOC,QAAP,IAAmBV,QAAQ,CAACI,WAAD,CAA/B;AACA,MAAI,CAACO,QAAD,EAAUC,WAAV,IAAyBZ,QAAQ,CAAC,CAAD,CAArC;AACA,MAAI,CAACa,QAAD,EAAUC,WAAV,IAAyBd,QAAQ,CAAC,CAAD,CAArC;;AAGA,QAAMe,iBAAiB,GAAG,MAAM;AAC5B,QAAIC,SAAS,GAAGC,QAAQ,CAACC,cAAT,CAAwB,YAAxB,EAAsCC,KAAtC,CAA4CC,KAA5C,CAAkD,GAAlD,CAAhB;AACAJ,IAAAA,SAAS,GAAGP,KAAK,CAACY,GAAN,CAAUC,YAAY,IAAIC,QAAQ,CAACD,YAAD,CAAlC,CAAZ;AACAZ,IAAAA,QAAQ,CAACM,SAAD,CAAR;AACH,GAJD;;AAMAjB,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMyB,YAAY,GAAG,EAArB;;AACA,SAAI,IAAIC,CAAC,GAAGrB,WAAW,CAACsB,MAAZ,GAAqB,CAAjC,EAAqCD,CAAC,GAAGrB,WAAW,CAACsB,MAAZ,GAAqBf,QAArB,GAAgC,CAAzE,EAA6Ec,CAAC,EAA9E,EAAmFD,YAAY,CAACG,IAAb,CAAkBF,CAAlB;;AACnF,UAAMG,qBAAqB,GAAIjB,QAAQ,KAAKP,WAAW,CAACsB,MAAZ,GAAmB,CAAjC,GAAsC,EAAtC,GAA2C,CAACb,QAAD,EAAUA,QAAQ,GAAC,CAAnB,CAAzE;AAEAR,IAAAA,oBAAoB,CAACwB,iBAArB,GAAyCD,qBAAzC;AACAvB,IAAAA,oBAAoB,CAACyB,cAArB,GAAsCF,qBAAtC;AACAvB,IAAAA,oBAAoB,CAAC0B,gBAArB,GAAwCP,YAAxC;AAEH,GATQ,EASP,CAACb,QAAD,EAAUE,QAAV,EAAmBJ,KAAnB,CATO,CAAT;;AAYA,QAAMuB,oBAAoB,GAAG,MAAM;AAC/B7B,IAAAA,iBAAiB,CAAC8B,YAAlB,GAAiC,KAAjC;AACA,QAAIC,iBAAiB,GAAG,EAAxB;;AACA,SAAI,IAAIT,CAAC,GAAG,CAAZ,EAAgBA,CAAC,GAAG,EAApB,EAAyBA,CAAC,EAA1B,EAA8B;AAC1BS,MAAAA,iBAAiB,CAACP,IAAlB,CAAuBJ,QAAQ,CAACY,IAAI,CAACC,MAAL,KAAgB,GAAjB,CAA/B;AACH;;AACDnB,IAAAA,QAAQ,CAACC,cAAT,CAAwB,YAAxB,EAAsCC,KAAtC,GAA8Ce,iBAAiB,CAACG,QAAlB,EAA9C;AACA3B,IAAAA,QAAQ,CAACwB,iBAAD,CAAR;AACH,GARD;;AAUA,QAAMI,UAAU,GAAG,MAAM;AACrB,QAAIC,OAAO,GAAG,IAAd;AACA,UAAMC,CAAC,GAAG/B,KAAK,CAACiB,MAAhB;AACA,UAAMe,YAAY,GAAGhC,KAArB;;AACA,SAAI,IAAIgB,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGe,CAAnB,EAAuBf,CAAC,EAAxB,EAA4B;AACxB,WAAI,IAAIiB,CAAC,GAAG,CAAZ,EAAgBA,CAAC,GAAGF,CAAC,GAACf,CAAF,GAAI,CAAxB,EAA6BiB,CAAC,EAA9B,EAAkC;AAC9BC,QAAAA,UAAU,CAAC,MAAM;AACb/B,UAAAA,WAAW,CAACa,CAAD,CAAX;AACAX,UAAAA,WAAW,CAAC4B,CAAD,CAAX;AACA,cAAGD,YAAY,CAACC,CAAD,CAAZ,GAAkBD,YAAY,CAACC,CAAC,GAAC,CAAH,CAAjC,EAAwCzC,IAAI,CAACwC,YAAD,EAAcC,CAAd,EAAgBA,CAAC,GAAC,CAAlB,CAAJ;AACxChC,UAAAA,QAAQ,CAAC,CAAC,GAAG+B,YAAJ,CAAD,CAAR;AACA,cAAGhB,CAAC,KAAKe,CAAC,GAAG,CAAV,IAAeE,CAAC,KAAKF,CAAC,GAAGf,CAAJ,GAAQ,CAAhC,EAAmCtB,iBAAiB,CAAC8B,YAAlB,GAAiC,IAAjC;AACtC,SANS,EAMNM,OAAO,IAAIhB,QAAQ,CAACpB,iBAAiB,CAACyC,cAAnB,CANb,CAAV;AAOH;AACJ;AACJ,GAfD;;AAiBA,sBACI;AAAA,4BAEI,QAAC,mBAAD;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAK,MAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,YAHJ,eAUI;AAAK,MAAA,SAAS,EAAC,+BAAf;AAAA,6BACI,QAAC,YAAD;AAAc,QAAA,KAAK,EAAEnC;AAArB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAVJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAgBH;;GAnEuBD,gB;;KAAAA,gB","sourcesContent":["import { useEffect, useState } from \"react\"\nimport \"./commonStyle.css\";\nimport swap from \"./swap\";\nimport TimeSpeed from \"./timeSpeed\";\nimport { liveAlgorithmData,arrayToSort } from \"./common/commonData\";\nimport { colorIndexesSettings } from \"./common/commonData\";\nimport NavigationComponent from \"./navigationComponent\";\nimport AlgorithmBox from \"./common/algorithmSortingBox\";\n\nexport default function SortingComponent() {\n    let [array,setArray] = useState(arrayToSort);\n    let [ithIndex,setIthIndex] = useState(0);\n    let [jthIndex,setJthIndex] = useState(0);\n\n\n    const updateSortingArea = () => {\n        let Temparray = document.getElementById(\"arrayInput\").value.split(\",\");\n        Temparray = array.map(arrayElement => parseInt(arrayElement));\n        setArray(Temparray);\n    }   \n\n    useEffect(() => {\n        const finalIndexes = [];\n        for(let i = arrayToSort.length - 1 ; i > arrayToSort.length - ithIndex - 1 ; i-- ) finalIndexes.push(i);\n        const comparedBoxesPosition = (ithIndex === arrayToSort.length-2) ? [] : [jthIndex,jthIndex+1];\n\n        colorIndexesSettings.compareColorIndex = comparedBoxesPosition;\n        colorIndexesSettings.swapColorIndex = comparedBoxesPosition;\n        colorIndexesSettings.sortedColorIndex = finalIndexes;\n        \n    },[ithIndex,jthIndex,array]);\n\n\n    const generateRandomNumber = () => {\n        liveAlgorithmData.sortedStatus = false;\n        let randomNumberArray = [];\n        for(let i = 0 ; i < 10 ; i++) {\n            randomNumberArray.push(parseInt(Math.random() * 100));\n        }\n        document.getElementById(\"arrayInput\").value = randomNumberArray.toString(); \n        setArray(randomNumberArray);\n    }\n\n    const bubbleSort = () => {\n        let timeOut = 1000;\n        const n = array.length;\n        const currentArray = array;\n        for(let i = 0; i < n ; i++) {\n            for(let j = 0 ; j < n-i-1  ; j++) {\n                setTimeout(() => {\n                    setIthIndex(i);\n                    setJthIndex(j);\n                    if(currentArray[j] > currentArray[j+1]) swap(currentArray,j,j+1);\n                    setArray([...currentArray]);\n                    if(i === n - 2 && j === n - i - 2) liveAlgorithmData.sortedStatus = true;\n                },  timeOut += parseInt(liveAlgorithmData.speedTimeCount));\n            }    \n        }\n    }   \n\n    return (\n        <div>\n            \n            <NavigationComponent />\n            <div className=\"inputControllerComponent\" >\n            {/* <button onClick={generateRandomNumber}>Random Numbers</button>    \n            <input id=\"arrayInput\" type=\"text\" onChange={updateSortingArea}/>\n            <button onClick={bubbleSort}>Start</button>\n            <TimeSpeed /> */}\n             </div>\n            \n            <div className=\"areaOfAlgorithmsVisualization\">\n                <AlgorithmBox array={array} />\n            </div>\n       </div>\n    )       \n}"]},"metadata":{},"sourceType":"module"}