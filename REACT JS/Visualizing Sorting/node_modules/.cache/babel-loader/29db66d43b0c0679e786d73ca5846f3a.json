{"ast":null,"code":"var _jsxFileName = \"/home/purvj/Documents/github-repositories/javascript-practice/REACT JS/Visualizing Sorting/src/sortingAlgorithms/BubbleSort.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { useRecoilState } from \"recoil\";\nimport { arrayToSortCommonState, sortedStatus, sortingTimeSpeed, sortingRunningStatus } from \"../common/commonData\";\nimport { AlgorithmSortingBox } from \"../components/algorithmSortingBox\";\nimport swap from \"../common/swap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function BubbleSort() {\n  _s();\n\n  let [mainArray, setMainArray] = useRecoilState(arrayToSortCommonState);\n  let [statusOfSorting, setStatusOfSorting] = useRecoilState(sortedStatus);\n  let timeSpeed = useRecoilState(sortingTimeSpeed);\n  let [array, setArray] = useState(mainArray);\n  let algorithmRunStatus = useRecoilState(sortingRunningStatus);\n  let [ithIndex, setIthIndex] = useState(0);\n  let [jthIndex, setJthIndex] = useState(0);\n  let [loopInvokeStatus, setLoopInvokeStatus] = useState(true);\n  let [comparisonCount, setComparisonCount] = useState(0);\n  let [swapCount, setSwapCount] = useState(0);\n  let [colorIndexesSettings, setColorIndexesSettings] = useState({\n    compare: [],\n    swap: [],\n    sorted: []\n  });\n  let finalIndexes = [];\n\n  if (algorithmRunStatus[0] && loopInvokeStatus) {\n    let timeOut = 1000;\n    const lengthOfArray = array.length;\n    const currentArray = array;\n\n    (async () => {\n      for (let i = 0; i < lengthOfArray; i++) {\n        for (let j = 0; j < lengthOfArray - i - 1; j++) {\n          // eslint-disable-next-line no-loop-func\n          await new Promise(resolve => {\n            setTimeout(() => {\n              setLoopInvokeStatus(false);\n\n              for (let i = array.length - 1; i > array.length - ithIndex - 1; i--) finalIndexes.push(i);\n\n              let comparedBoxesPosition = ithIndex === array.length - 2 ? [] : [jthIndex, jthIndex + 1];\n              setComparisonCount(comparisonCount++);\n              setColorIndexesSettings({\n                compare: [],\n                swap: [ithIndex, jthIndex],\n                sorted: finalIndexes\n              });\n              console.log(jthIndex);\n\n              if (currentArray[j] > currentArray[j + 1]) {\n                swap(currentArray, j, j + 1);\n                setSwapCount(swapCount++);\n                setArray([...currentArray]);\n              }\n\n              setIthIndex(i);\n              setJthIndex(j);\n\n              if (i === lengthOfArray - 2 && j === lengthOfArray - i - 2) {\n                setStatusOfSorting(true);\n              }\n            }, timeOut += timeSpeed[0]);\n            resolve();\n          });\n        }\n      }\n    })();\n  }\n\n  return /*#__PURE__*/_jsxDEV(AlgorithmSortingBox, {\n    array: array,\n    comparisonCount: comparisonCount,\n    swapCount: swapCount,\n    colorIndexesSettings: colorIndexesSettings\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n}\n\n_s(BubbleSort, \"ooFucIyz67H0Ixt4xuvyWJucsV4=\", false, function () {\n  return [useRecoilState, useRecoilState, useRecoilState, useRecoilState];\n});\n\n_c = BubbleSort;\n\nconst setColorCnfiguration = () => {};\n\nvar _c;\n\n$RefreshReg$(_c, \"BubbleSort\");","map":{"version":3,"sources":["/home/purvj/Documents/github-repositories/javascript-practice/REACT JS/Visualizing Sorting/src/sortingAlgorithms/BubbleSort.js"],"names":["useEffect","useState","useRecoilState","arrayToSortCommonState","sortedStatus","sortingTimeSpeed","sortingRunningStatus","AlgorithmSortingBox","swap","BubbleSort","mainArray","setMainArray","statusOfSorting","setStatusOfSorting","timeSpeed","array","setArray","algorithmRunStatus","ithIndex","setIthIndex","jthIndex","setJthIndex","loopInvokeStatus","setLoopInvokeStatus","comparisonCount","setComparisonCount","swapCount","setSwapCount","colorIndexesSettings","setColorIndexesSettings","compare","sorted","finalIndexes","timeOut","lengthOfArray","length","currentArray","i","j","Promise","resolve","setTimeout","push","comparedBoxesPosition","console","log","setColorCnfiguration"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useRecoilState } from \"recoil\";\nimport { arrayToSortCommonState ,sortedStatus ,sortingTimeSpeed,sortingRunningStatus } from \"../common/commonData\";\nimport { AlgorithmSortingBox } from \"../components/algorithmSortingBox\";\nimport swap from \"../common/swap\";\n\n\nexport default function BubbleSort() {\n    let [mainArray,setMainArray] = useRecoilState(arrayToSortCommonState);\n    let [statusOfSorting,setStatusOfSorting] = useRecoilState(sortedStatus);\n    let timeSpeed = useRecoilState(sortingTimeSpeed);\n    let [array,setArray] = useState(mainArray);\n    let algorithmRunStatus = useRecoilState(sortingRunningStatus);\n    let [ithIndex,setIthIndex] = useState(0);\n    let [jthIndex,setJthIndex] = useState(0);\n    let [loopInvokeStatus,setLoopInvokeStatus] = useState(true);\n    let [comparisonCount,setComparisonCount] = useState(0);\n    let [swapCount,setSwapCount] = useState(0);\n    let [colorIndexesSettings,setColorIndexesSettings] = useState({\n        compare: [],\n        swap : [],\n        sorted : []\n    });\n    let finalIndexes = [];\n    if(algorithmRunStatus[0] && loopInvokeStatus) {\n        let timeOut = 1000;\n        const lengthOfArray = array.length;\n        const currentArray = array;\n\n        (async () => {\n            for(let i = 0; i < lengthOfArray ; i++) {\n                for(let j = 0 ; j < lengthOfArray-i-1  ; j++) {\n                    // eslint-disable-next-line no-loop-func\n                await new Promise((resolve) => {\n                    setTimeout(() => {\n                        setLoopInvokeStatus(false);\n                        for(let i = array.length - 1 ; i > array.length - ithIndex - 1 ; i-- ) finalIndexes.push(i);\n                        let comparedBoxesPosition = (ithIndex === array.length - 2) ? [] : [jthIndex,jthIndex+1];\n                        setComparisonCount(comparisonCount++);\n                        setColorIndexesSettings({\n                            compare: [],\n                            swap : [ithIndex,jthIndex],\n                            sorted : finalIndexes \n                        });\n\n                        console.log(jthIndex);\n                        if(currentArray[j] > currentArray[j+1]) { \n                            swap(currentArray,j,j+1);\n                            setSwapCount(swapCount++);\n                            setArray([...currentArray]);\n                        }\n\n                        setIthIndex(i);\n                        setJthIndex(j);\n\n                        if(i === lengthOfArray - 2 && j === lengthOfArray - i - 2)\n                        { \n                            setStatusOfSorting(true);\n                            \n                        }\n                    },  timeOut += timeSpeed[0]);\n                    resolve();\n                        });\n                }    \n            }\n        })();\n    }\n    return ( \n        <AlgorithmSortingBox array={array} comparisonCount={comparisonCount} swapCount={swapCount} colorIndexesSettings={colorIndexesSettings} />\n        )    \n}\n\nconst setColorCnfiguration = () => {\n    \n}"]},"metadata":{},"sourceType":"module"}