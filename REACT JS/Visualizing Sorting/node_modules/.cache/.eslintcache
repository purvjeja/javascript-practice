[{"/home/purvj/Documents/github-repositories/javascript-practice/REACT JS/Visualizing Sorting/src/index.js":"1","/home/purvj/Documents/github-repositories/javascript-practice/REACT JS/Visualizing Sorting/src/sortingComponent.js":"2","/home/purvj/Documents/github-repositories/javascript-practice/REACT JS/Visualizing Sorting/src/swap.js":"3"},{"size":202,"mtime":1627888679995,"results":"4","hashOfConfig":"5"},{"size":3414,"mtime":1628599824232,"results":"6","hashOfConfig":"5"},{"size":191,"mtime":1628599825900,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"1hvbjzv",{"filePath":"11","messages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/purvj/Documents/github-repositories/javascript-practice/REACT JS/Visualizing Sorting/src/index.js",[],["16","17"],"/home/purvj/Documents/github-repositories/javascript-practice/REACT JS/Visualizing Sorting/src/sortingComponent.js",["18"],"import { useEffect, useState } from \"react\"\nimport \"./sortingComponent.css\";\nimport swap from \"./swap\";\n\nexport default function SortingComponent() {\n    let [arrayToSort,setArrayToSort] = useState([4,3,2,1,0,-1,-2,-3,-4]);\n    let [sortedStatus,setSortedStatus] = useState(false);\n    let [operationIndex,setOperationIndex] = useState({\n        compareColorIndex : [],\n        swapColorIndex : [],\n        sortedColorIndex : []\n    });\n    let [ithIndex,setIthIndex] = useState(0);\n    let [jthIndex,setJthIndex] = useState(0);\n\n    const updateSortingArea = () => {\n        let array = document.getElementById(\"arrayInput\").value.split(\",\");\n        array = array.map(arrayElement => parseInt(arrayElement));\n        setArrayToSort(array);\n    }   \n\n    useEffect(() => {\n        const finalIndexes = [];\n        for(let i = arrayToSort.length - 1 ; i > arrayToSort.length - ithIndex - 1 ; i-- ) finalIndexes.push(i);\n        const comparedBoxesPosition = (ithIndex === arrayToSort.length-2) ? [] : [jthIndex,jthIndex+1];\n\n        setOperationIndex({\n            compareColorIndex : comparedBoxesPosition,\n            swapColorIndex : comparedBoxesPosition,\n            sortedColorIndex : finalIndexes,\n        })\n    },[ithIndex,jthIndex,arrayToSort]);\n\n    const generateRandomNumber = () => {\n        setSortedStatus(false);\n        let randomNumberArray = [];\n        for(let i = 0 ; i < 10 ; i++) {\n            randomNumberArray.push(parseInt(Math.random() * 100));\n        }\n        document.getElementById(\"arrayInput\").value = randomNumberArray.toString(); \n        setOperationIndex({\n            compareColorIndex : [],\n            swapColorIndex : [],\n            sortedColorIndex : [], \n        });\n        setArrayToSort(randomNumberArray);\n    }\n\n\n    const setColor = (index) => { \n        return {backgroundColor : (operationIndex.compareColorIndex.includes(index)? 'pink' : \n                                  (operationIndex.swapColorIndex.includes(index)) ? 'yellow' : \n                                  (operationIndex.sortedColorIndex.includes(index)) ? 'green' : 'grey') }; \n    }\n\n    const NumberBox = (props) => {\n        return (\n            <div className=\"box\" id={props.index} style={setColor(props.index)}>\n                {props.content}\n            </div>\n        )\n    }   \n\n\n    const bubbleSort = () => {\n        let timeOut = 500;\n        const n = arrayToSort.length;\n        const array = arrayToSort;\n        for(let i = 0; i < n ; i++) {\n            for(let j = 0 ; j < n-i-1  ; j++) {\n                // eslint-disable-next-line no-loop-func\n                setTimeout(() => {\n                    setIthIndex(i);\n                    setJthIndex(j);\n                    if(array[j] > array[j+1]) swap(array,j,j+1);          \n                    setArrayToSort([...array]);\n                    if(i === n - 2 && j === n - i - 2) setSortedStatus(true);\n                },  timeOut += 1000);\n            }    \n        }\n    }   \n\n    return (\n        <div>\n        <input id=\"arrayInput\" type=\"text\" onChange={updateSortingArea} /> \n\n        <div className=\"numberBoxArea\"> \n            {arrayToSort.map((arrayElement,index) => <div key={index}>  <NumberBox index={index} content={arrayElement}  /> </div>)}\n        </div>\n        <button onClick={bubbleSort}>Start</button>\n        <button onClick={generateRandomNumber}> Random Numbers </button>\n       </div>\n    )       \n}","/home/purvj/Documents/github-repositories/javascript-practice/REACT JS/Visualizing Sorting/src/swap.js",[],{"ruleId":"19","replacedBy":"20"},{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","severity":1,"message":"24","line":7,"column":10,"nodeType":"25","messageId":"26","endLine":7,"endColumn":22},"no-native-reassign",["27"],"no-negated-in-lhs",["28"],"no-unused-vars","'sortedStatus' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]